
Lab_3_2_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800104  00800104  00000d44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016eb  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf8  00000000  00000000  0000254f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa7  00000000  00000000  00003147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001509  00000000  00000000  00004431  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000593a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	ff 00       	.word	0x00ff	; ????
  5e:	50 01       	movw	r10, r0
  60:	59 01       	movw	r10, r18
  62:	62 01       	movw	r12, r4
  64:	6b 01       	movw	r12, r22
  66:	74 01       	movw	r14, r8
  68:	7d 01       	movw	r14, r26
  6a:	86 01       	movw	r16, r12
  6c:	8f 01       	movw	r16, r30
  6e:	98 01       	movw	r18, r16

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ea       	ldi	r30, 0xAC	; 172
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 10 03 	call	0x620	; 0x620 <main>
  a6:	0c 94 54 06 	jmp	0xca8	; 0xca8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <button>:
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
  b6:	1f 99       	sbic	0x03, 7	; 3
  b8:	10 c0       	rjmp	.+32     	; 0xda <button+0x2c>
  ba:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  be:	8f 79       	andi	r24, 0x9F	; 159
  c0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  c4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
  d6:	1f 9b       	sbis	0x03, 7	; 3
  d8:	f0 cf       	rjmp	.-32     	; 0xba <button+0xc>
  da:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  de:	89 7f       	andi	r24, 0xF9	; 249
  e0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  e4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  e8:	80 66       	ori	r24, 0x60	; 96
  ea:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  ee:	df cf       	rjmp	.-66     	; 0xae <button>

000000f0 <blink>:
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
  f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  fc:	88 23       	and	r24, r24
  fe:	91 f0       	breq	.+36     	; 0x124 <blink+0x34>
 100:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 104:	89 7f       	andi	r24, 0xF9	; 249
 106:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 10a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 114:	8b e0       	ldi	r24, 0x0B	; 11
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
 11c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 120:	81 11       	cpse	r24, r1
 122:	ee cf       	rjmp	.-36     	; 0x100 <blink+0x10>
 124:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 128:	89 7f       	andi	r24, 0xF9	; 249
 12a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 12e:	e0 cf       	rjmp	.-64     	; 0xf0 <blink>

00000130 <__vector_7>:
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
 152:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 27       	eor	r24, r25
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	8b e0       	ldi	r24, 0x0B	; 11
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 9b 04 	call	0x936	; 0x936 <unlock>
 166:	0e 94 32 04 	call	0x864	; 0x864 <yield>
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_3>:
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 9b 04 	call	0x936	; 0x936 <unlock>
 1b6:	0e 94 32 04 	call	0x864	; 0x864 <yield>
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <writeChar>:
	return false;
	
}


int writeChar(char ch, int pos){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	f0 97       	sbiw	r30, 0x30	; 48
 1e6:	ea 30       	cpi	r30, 0x0A	; 10
 1e8:	f1 05       	cpc	r31, r1
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <writeChar+0x1a>
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	default:
		return 2;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 1;
	}
	return 0;
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret


int writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 1f6:	e2 5d       	subi	r30, 0xD2	; 210
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
 202:	e5 e0       	ldi	r30, 0x05	; 5
 204:	f0 e0       	ldi	r31, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 206:	45 e0       	ldi	r20, 0x05	; 5
 208:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 20e:	62 30       	cpi	r22, 0x02	; 2
 210:	71 05       	cpc	r23, r1
 212:	09 f4       	brne	.+2      	; 0x216 <writeChar+0x3a>
 214:	35 c1       	rjmp	.+618    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 216:	0c f4       	brge	.+2      	; 0x21a <writeChar+0x3e>
 218:	94 c0       	rjmp	.+296    	; 0x342 <writeChar+0x166>
 21a:	64 30       	cpi	r22, 0x04	; 4
 21c:	71 05       	cpc	r23, r1
 21e:	09 f4       	brne	.+2      	; 0x222 <writeChar+0x46>
 220:	0d c1       	rjmp	.+538    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 222:	0c f4       	brge	.+2      	; 0x226 <writeChar+0x4a>
 224:	d5 c0       	rjmp	.+426    	; 0x3d0 <writeChar+0x1f4>
 226:	65 30       	cpi	r22, 0x05	; 5
 228:	71 05       	cpc	r23, r1
 22a:	09 f0       	breq	.+2      	; 0x22e <writeChar+0x52>
 22c:	cc c0       	rjmp	.+408    	; 0x3c6 <writeChar+0x1ea>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 22e:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 232:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 234:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 238:	82 95       	swap	r24
 23a:	92 95       	swap	r25
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	98 27       	eor	r25, r24
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	98 27       	eor	r25, r24
 244:	86 2b       	or	r24, r22
 246:	87 2b       	or	r24, r23
 248:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 24c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 250:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 252:	42 95       	swap	r20
 254:	52 95       	swap	r21
 256:	50 7f       	andi	r21, 0xF0	; 240
 258:	54 27       	eor	r21, r20
 25a:	40 7f       	andi	r20, 0xF0	; 240
 25c:	54 27       	eor	r21, r20
 25e:	48 2b       	or	r20, r24
 260:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 264:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 268:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 26a:	cf 01       	movw	r24, r30
 26c:	82 95       	swap	r24
 26e:	92 95       	swap	r25
 270:	90 7f       	andi	r25, 0xF0	; 240
 272:	98 27       	eor	r25, r24
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	84 2b       	or	r24, r20
 27a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 27e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 282:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 284:	22 95       	swap	r18
 286:	32 95       	swap	r19
 288:	30 7f       	andi	r19, 0xF0	; 240
 28a:	32 27       	eor	r19, r18
 28c:	20 7f       	andi	r18, 0xF0	; 240
 28e:	32 27       	eor	r19, r18
 290:	28 2b       	or	r18, r24
 292:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		return 1;
	}
	return 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ae cf       	rjmp	.-164    	; 0x20e <writeChar+0x32>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
 2b6:	ee e0       	ldi	r30, 0x0E	; 14
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
 2c2:	a5 cf       	rjmp	.-182    	; 0x20e <writeChar+0x32>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
 2c8:	eb e0       	ldi	r30, 0x0B	; 11
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2d4:	9c cf       	rjmp	.-200    	; 0x20e <writeChar+0x32>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 2da:	eb e0       	ldi	r30, 0x0B	; 11
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
 2de:	45 e0       	ldi	r20, 0x05	; 5
 2e0:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
 2e6:	93 cf       	rjmp	.-218    	; 0x20e <writeChar+0x32>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
 2ec:	eb e0       	ldi	r30, 0x0B	; 11
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 2f0:	44 e0       	ldi	r20, 0x04	; 4
 2f2:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2f8:	8a cf       	rjmp	.-236    	; 0x20e <writeChar+0x32>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
 2fe:	ef e0       	ldi	r30, 0x0F	; 15
 300:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 302:	44 e0       	ldi	r20, 0x04	; 4
 304:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 30a:	81 cf       	rjmp	.-254    	; 0x20e <writeChar+0x32>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 310:	e1 e0       	ldi	r30, 0x01	; 1
 312:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
 31c:	78 cf       	rjmp	.-272    	; 0x20e <writeChar+0x32>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
 322:	ef e0       	ldi	r30, 0x0F	; 15
 324:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 326:	45 e0       	ldi	r20, 0x05	; 5
 328:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 32e:	6f cf       	rjmp	.-290    	; 0x20e <writeChar+0x32>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 334:	eb e0       	ldi	r30, 0x0B	; 11
 336:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 338:	45 e0       	ldi	r20, 0x05	; 5
 33a:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 340:	66 cf       	rjmp	.-308    	; 0x20e <writeChar+0x32>
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 342:	61 15       	cp	r22, r1
 344:	71 05       	cpc	r23, r1
 346:	09 f4       	brne	.+2      	; 0x34a <writeChar+0x16e>
 348:	ba c0       	rjmp	.+372    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 34a:	61 30       	cpi	r22, 0x01	; 1
 34c:	71 05       	cpc	r23, r1
 34e:	d9 f5       	brne	.+118    	; 0x3c6 <writeChar+0x1ea>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 350:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 354:	7f 70       	andi	r23, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 356:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 35a:	82 95       	swap	r24
 35c:	92 95       	swap	r25
 35e:	90 7f       	andi	r25, 0xF0	; 240
 360:	98 27       	eor	r25, r24
 362:	80 7f       	andi	r24, 0xF0	; 240
 364:	98 27       	eor	r25, r24
 366:	ec 01       	movw	r28, r24
 368:	c7 2b       	or	r28, r23
 36a:	be 01       	movw	r22, r28
 36c:	6a 2b       	or	r22, r26
 36e:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 372:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 376:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 378:	42 95       	swap	r20
 37a:	52 95       	swap	r21
 37c:	50 7f       	andi	r21, 0xF0	; 240
 37e:	54 27       	eor	r21, r20
 380:	40 7f       	andi	r20, 0xF0	; 240
 382:	54 27       	eor	r21, r20
 384:	48 2b       	or	r20, r24
 386:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 38a:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 38e:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 390:	cf 01       	movw	r24, r30
 392:	82 95       	swap	r24
 394:	92 95       	swap	r25
 396:	90 7f       	andi	r25, 0xF0	; 240
 398:	98 27       	eor	r25, r24
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	98 27       	eor	r25, r24
 39e:	84 2b       	or	r24, r20
 3a0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 3a4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3a8:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 3aa:	22 95       	swap	r18
 3ac:	32 95       	swap	r19
 3ae:	30 7f       	andi	r19, 0xF0	; 240
 3b0:	32 27       	eor	r19, r18
 3b2:	20 7f       	andi	r18, 0xF0	; 240
 3b4:	32 27       	eor	r19, r18
 3b6:	28 2b       	or	r18, r24
 3b8:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 3d0:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3d4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 3d6:	82 95       	swap	r24
 3d8:	92 95       	swap	r25
 3da:	90 7f       	andi	r25, 0xF0	; 240
 3dc:	98 27       	eor	r25, r24
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	98 27       	eor	r25, r24
 3e2:	86 2b       	or	r24, r22
 3e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 3e8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3ec:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 3ee:	42 95       	swap	r20
 3f0:	52 95       	swap	r21
 3f2:	50 7f       	andi	r21, 0xF0	; 240
 3f4:	54 27       	eor	r21, r20
 3f6:	40 7f       	andi	r20, 0xF0	; 240
 3f8:	54 27       	eor	r21, r20
 3fa:	48 2b       	or	r20, r24
 3fc:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 400:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 404:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 406:	cf 01       	movw	r24, r30
 408:	82 95       	swap	r24
 40a:	92 95       	swap	r25
 40c:	90 7f       	andi	r25, 0xF0	; 240
 40e:	98 27       	eor	r25, r24
 410:	80 7f       	andi	r24, 0xF0	; 240
 412:	98 27       	eor	r25, r24
 414:	84 2b       	or	r24, r20
 416:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 41a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 41e:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 420:	22 95       	swap	r18
 422:	32 95       	swap	r19
 424:	30 7f       	andi	r19, 0xF0	; 240
 426:	32 27       	eor	r19, r18
 428:	20 7f       	andi	r18, 0xF0	; 240
 42a:	32 27       	eor	r19, r18
 42c:	28 2b       	or	r18, r24
 42e:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 43c:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 440:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 442:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 446:	86 2b       	or	r24, r22
 448:	87 2b       	or	r24, r23
 44a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 44e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 452:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 454:	48 2b       	or	r20, r24
 456:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 45a:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 45e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 460:	ef 01       	movw	r28, r30
 462:	c8 2b       	or	r28, r24
 464:	ce 01       	movw	r24, r28
 466:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 46a:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 46e:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 470:	28 2b       	or	r18, r24
 472:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 480:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 484:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 486:	86 2b       	or	r24, r22
 488:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 48c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 490:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 492:	48 2b       	or	r20, r24
 494:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 498:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 49c:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 49e:	af 01       	movw	r20, r30
 4a0:	48 2b       	or	r20, r24
 4a2:	ca 01       	movw	r24, r20
 4a4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 4a8:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4ac:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 4ae:	28 2b       	or	r18, r24
 4b0:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 4be:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 4c4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 4c8:	86 2b       	or	r24, r22
 4ca:	87 2b       	or	r24, r23
 4cc:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 4d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4d4:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 4d6:	48 2b       	or	r20, r24
 4d8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 4dc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4e0:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 4e2:	af 01       	movw	r20, r30
 4e4:	48 2b       	or	r20, r24
 4e6:	ca 01       	movw	r24, r20
 4e8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 4ec:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4f0:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 4f2:	28 2b       	or	r18, r24
 4f4:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <writeLong>:
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
	
}
void writeLong(long i) {
 502:	8f 92       	push	r8
 504:	9f 92       	push	r9
 506:	af 92       	push	r10
 508:	bf 92       	push	r11
 50a:	cf 92       	push	r12
 50c:	df 92       	push	r13
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	c5 e0       	ldi	r28, 0x05	; 5
 518:	d0 e0       	ldi	r29, 0x00	; 0
	int n = 0;
	while (n < 6) {		// a while loop for getting the first 6 digits of a number.
		int temp = i % 10;
		writeChar((char)temp + '0', 5-n);
 51a:	2a e0       	ldi	r18, 0x0A	; 10
 51c:	c2 2e       	mov	r12, r18
 51e:	d1 2c       	mov	r13, r1
 520:	e1 2c       	mov	r14, r1
 522:	f1 2c       	mov	r15, r1
 524:	a7 01       	movw	r20, r14
 526:	96 01       	movw	r18, r12
 528:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divmodsi4>
 52c:	49 01       	movw	r8, r18
 52e:	5a 01       	movw	r10, r20
 530:	86 2f       	mov	r24, r22
 532:	be 01       	movw	r22, r28
 534:	80 5d       	subi	r24, 0xD0	; 208
 536:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
		i = floor(i / 10);
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatsisf>
 542:	0e 94 4b 05 	call	0xa96	; 0xa96 <floor>
 546:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fixsfsi>
 54a:	21 97       	sbiw	r28, 0x01	; 1
 54c:	58 f7       	brcc	.-42     	; 0x524 <writeLong+0x22>
		n += 1;
	}	
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	08 95       	ret

00000564 <primes>:

void primes() {
 564:	4f 92       	push	r4
 566:	5f 92       	push	r5
 568:	6f 92       	push	r6
 56a:	7f 92       	push	r7
 56c:	8f 92       	push	r8
 56e:	9f 92       	push	r9
 570:	af 92       	push	r10
 572:	bf 92       	push	r11
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
	for(long count=0; count < 50000; count+= 1) {
 57c:	41 2c       	mov	r4, r1
 57e:	51 2c       	mov	r5, r1
 580:	32 01       	movw	r6, r4
 582:	53 01       	movw	r10, r6
 584:	42 01       	movw	r8, r4
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	88 1a       	sub	r8, r24
 58a:	98 0a       	sbc	r9, r24
 58c:	a8 0a       	sbc	r10, r24
 58e:	b8 0a       	sbc	r11, r24
 590:	80 e5       	ldi	r24, 0x50	; 80
 592:	88 16       	cp	r8, r24
 594:	83 ec       	ldi	r24, 0xC3	; 195
 596:	98 06       	cpc	r9, r24
 598:	a1 04       	cpc	r10, r1
 59a:	b1 04       	cpc	r11, r1
 59c:	a1 f1       	breq	.+104    	; 0x606 <primes+0xa2>
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 59e:	80 fe       	sbrs	r8, 0
 5a0:	28 c0       	rjmp	.+80     	; 0x5f2 <primes+0x8e>
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	88 16       	cp	r8, r24
 5a6:	91 04       	cpc	r9, r1
 5a8:	a1 04       	cpc	r10, r1
 5aa:	b1 04       	cpc	r11, r1
 5ac:	11 f1       	breq	.+68     	; 0x5f2 <primes+0x8e>
		if (i - 1 == n) return true;
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	88 16       	cp	r8, r24
 5b2:	91 04       	cpc	r9, r1
 5b4:	a1 04       	cpc	r10, r1
 5b6:	b1 04       	cpc	r11, r1
 5b8:	f9 f0       	breq	.+62     	; 0x5f8 <primes+0x94>
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	c8 2e       	mov	r12, r24
 5be:	d1 2c       	mov	r13, r1
 5c0:	e1 2c       	mov	r14, r1
 5c2:	f1 2c       	mov	r15, r1
 5c4:	0c c0       	rjmp	.+24     	; 0x5de <primes+0x7a>
 5c6:	d7 01       	movw	r26, r14
 5c8:	c6 01       	movw	r24, r12
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	a1 1d       	adc	r26, r1
 5ce:	b1 1d       	adc	r27, r1
 5d0:	c4 14       	cp	r12, r4
 5d2:	d5 04       	cpc	r13, r5
 5d4:	e6 04       	cpc	r14, r6
 5d6:	f7 04       	cpc	r15, r7
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <primes+0x94>
 5da:	6c 01       	movw	r12, r24
 5dc:	7d 01       	movw	r14, r26
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 5de:	c5 01       	movw	r24, r10
 5e0:	b4 01       	movw	r22, r8
 5e2:	a7 01       	movw	r20, r14
 5e4:	96 01       	movw	r18, r12
 5e6:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divmodsi4>
 5ea:	67 2b       	or	r22, r23
 5ec:	68 2b       	or	r22, r24
 5ee:	69 2b       	or	r22, r25
 5f0:	51 f7       	brne	.-44     	; 0x5c6 <primes+0x62>
		if (i - 1 == n) return true;
 5f2:	24 01       	movw	r4, r8
 5f4:	35 01       	movw	r6, r10
 5f6:	c5 cf       	rjmp	.-118    	; 0x582 <primes+0x1e>
}

void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
 5f8:	c5 01       	movw	r24, r10
 5fa:	b4 01       	movw	r22, r8
 5fc:	0e 94 81 02 	call	0x502	; 0x502 <writeLong>


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
		if (i - 1 == n) return true;
 600:	24 01       	movw	r4, r8
 602:	35 01       	movw	r6, r10
 604:	be cf       	rjmp	.-132    	; 0x582 <primes+0x1e>
void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
	}
}
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	bf 90       	pop	r11
 610:	af 90       	pop	r10
 612:	9f 90       	pop	r9
 614:	8f 90       	pop	r8
 616:	7f 90       	pop	r7
 618:	6f 90       	pop	r6
 61a:	5f 90       	pop	r5
 61c:	4f 90       	pop	r4
 61e:	08 95       	ret

00000620 <main>:
}


int main(void)
{
	CLKPR = 0x80;
 620:	e1 e6       	ldi	r30, 0x61	; 97
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 e8       	ldi	r24, 0x80	; 128
 626:	80 83       	st	Z, r24
	CLKPR = 0x00;
 628:	10 82       	st	Z, r1
	primes();
}

void LCD_Init(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
 62a:	86 e3       	ldi	r24, 0x36	; 54
 62c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
 630:	87 e0       	ldi	r24, 0x07	; 7
 632:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
 636:	8f e0       	ldi	r24, 0x0F	; 15
 638:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 63c:	80 ec       	ldi	r24, 0xC0	; 192
 63e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 642:	8d e0       	ldi	r24, 0x0D	; 13
 644:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
{
	CLKPR = 0x80;
	CLKPR = 0x00;
    LCD_Init();

	lock(&bli); lock(&but);
 648:	8b e0       	ldi	r24, 0x0B	; 11
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
 650:	87 e0       	ldi	r24, 0x07	; 7
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lock>
	spawn(blink, 1);
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	88 e7       	ldi	r24, 0x78	; 120
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spawn>
	spawn(button, 2);
 664:	62 e0       	ldi	r22, 0x02	; 2
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	87 e5       	ldi	r24, 0x57	; 87
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spawn>
	primes();
 670:	0e 94 b2 02 	call	0x564	; 0x564 <primes>
}
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	08 95       	ret

0000067a <dispatch>:
		while (1) ;  // not much else to do...
	}
	return p;
}

static void dispatch(thread next) {
 67a:	cf 93       	push	r28
 67c:	df 93       	push	r29
 67e:	00 d0       	rcall	.+0      	; 0x680 <dispatch+0x6>
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	9a 83       	std	Y+2, r25	; 0x02
 686:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 688:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 68c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 690:	06 96       	adiw	r24, 0x06	; 6
 692:	0e 94 13 06 	call	0xc26	; 0xc26 <setjmp>
 696:	89 2b       	or	r24, r25
 698:	29 f0       	breq	.+10     	; 0x6a4 <dispatch+0x2a>
		current = next;
		longjmp(next->context,1);
	}
}
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret
	return p;
}

static void dispatch(thread next) {
	if (setjmp(current->context) == 0) {
		current = next;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		longjmp(next->context,1);
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	06 96       	adiw	r24, 0x06	; 6
 6b6:	0e 94 33 06 	call	0xc66	; 0xc66 <longjmp>

000006ba <spawn>:
	}
}

void spawn(void (* function)(int), int arg) {
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <spawn+0x6>
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 6c4:	f8 94       	cli
	if (!initialized) initialize();
 6c6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <initialized>
 6ca:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <initialized+0x1>
 6ce:	23 2b       	or	r18, r19
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <spawn+0x1a>
 6d2:	3e c0       	rjmp	.+124    	; 0x750 <spawn+0x96>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 6d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 6d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 6dc:	3a 83       	std	Y+2, r19	; 0x02
 6de:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 6e0:	23 2b       	or	r18, r19
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <spawn+0x2c>
 6e4:	73 c0       	rjmp	.+230    	; 0x7cc <spawn+0x112>
		*queue = (*queue)->next;
 6e6:	e9 81       	ldd	r30, Y+1	; 0x01
 6e8:	fa 81       	ldd	r31, Y+2	; 0x02
 6ea:	44 81       	ldd	r20, Z+4	; 0x04
 6ec:	55 81       	ldd	r21, Z+5	; 0x05
 6ee:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 6f2:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 6f6:	91 83       	std	Z+1, r25	; 0x01
 6f8:	80 83       	st	Z, r24
	newp->arg = arg;
 6fa:	73 83       	std	Z+3, r23	; 0x03
 6fc:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 6fe:	15 82       	std	Z+5, r1	; 0x05
 700:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 702:	cf 01       	movw	r24, r30
 704:	06 96       	adiw	r24, 0x06	; 6
 706:	0e 94 13 06 	call	0xc26	; 0xc26 <setjmp>
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	09 f4       	brne	.+2      	; 0x710 <spawn+0x56>
 70e:	6b c0       	rjmp	.+214    	; 0x7e6 <spawn+0x12c>
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);
 710:	e9 81       	ldd	r30, Y+1	; 0x01
 712:	fa 81       	ldd	r31, Y+2	; 0x02
 714:	36 96       	adiw	r30, 0x06	; 6
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	9a 81       	ldd	r25, Y+2	; 0x02
 71a:	87 59       	subi	r24, 0x97	; 151
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	91 8b       	std	Z+17, r25	; 0x11
 720:	80 8b       	std	Z+16, r24	; 0x10
 722:	93 8b       	std	Z+19, r25	; 0x13
 724:	82 8b       	std	Z+18, r24	; 0x12

	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
 726:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <readyQ>
 72a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <readyQ+0x1>
 72e:	00 97       	sbiw	r24, 0x00	; 0
 730:	09 f4       	brne	.+2      	; 0x734 <spawn+0x7a>
 732:	4d c0       	rjmp	.+154    	; 0x7ce <spawn+0x114>
		*queue = p;
	} else {	
		thread q = *queue;
		*queue = p;
 734:	e9 81       	ldd	r30, Y+1	; 0x01
 736:	fa 81       	ldd	r31, Y+2	; 0x02
 738:	f0 93 10 01 	sts	0x0110, r31	; 0x800110 <readyQ+0x1>
 73c:	e0 93 0f 01 	sts	0x010F, r30	; 0x80010f <readyQ>
		p->next = q;
 740:	95 83       	std	Z+5, r25	; 0x05
 742:	84 83       	std	Z+4, r24	; 0x04
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 744:	78 94       	sei
}
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 750:	2b ee       	ldi	r18, 0xEB	; 235
 752:	31 e0       	ldi	r19, 0x01	; 1
 754:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <threads+0x5>
 758:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <threads+0x4>
 75c:	28 e5       	ldi	r18, 0x58	; 88
 75e:	32 e0       	ldi	r19, 0x02	; 2
 760:	30 93 f0 01 	sts	0x01F0, r19	; 0x8001f0 <threads+0x72>
 764:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <threads+0x71>
 768:	25 ec       	ldi	r18, 0xC5	; 197
 76a:	32 e0       	ldi	r19, 0x02	; 2
 76c:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <threads+0xdf>
 770:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 774:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14c>
 778:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <threads+0x14b>


	DDRB |= (1 << DDB7);
 77c:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
 77e:	2f 9a       	sbi	0x05, 7	; 5
	MCUCR = (0 << PUD);
 780:	15 be       	out	0x35, r1	; 53


	EIMSK |= (1<<PCIF1);
 782:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15);
 784:	ec e6       	ldi	r30, 0x6C	; 108
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	20 81       	ld	r18, Z
 78a:	20 68       	ori	r18, 0x80	; 128
 78c:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1A1);
 78e:	e0 e8       	ldi	r30, 0x80	; 128
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	20 81       	ld	r18, Z
 794:	20 68       	ori	r18, 0x80	; 128
 796:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A);
 798:	ef e6       	ldi	r30, 0x6F	; 111
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	20 81       	ld	r18, Z
 79e:	22 60       	ori	r18, 0x02	; 2
 7a0:	20 83       	st	Z, r18
	
	OCR1A = 0x1E85; //0x7A1; //0x1E85;
 7a2:	25 e8       	ldi	r18, 0x85	; 133
 7a4:	3e e1       	ldi	r19, 0x1E	; 30
 7a6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 7aa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	initialized = 1;
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <initialized+0x1>
 7b6:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <initialized>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 7ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 7be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 7c2:	3a 83       	std	Y+2, r19	; 0x02
 7c4:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 7c6:	23 2b       	or	r18, r19
 7c8:	09 f0       	breq	.+2      	; 0x7cc <spawn+0x112>
 7ca:	8d cf       	rjmp	.-230    	; 0x6e6 <spawn+0x2c>
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <spawn+0x112>
	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 7ce:	29 81       	ldd	r18, Y+1	; 0x01
 7d0:	3a 81       	ldd	r19, Y+2	; 0x02
 7d2:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <readyQ+0x1>
 7d6:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <readyQ>
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 7da:	78 94       	sei
}
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret
	newp = dequeue(&freeQ);
	newp->function = function;
	newp->arg = arg;
	newp->next = NULL;
	if (setjmp(newp->context) == 1) {
		ENABLE();
 7e6:	78 94       	sei
		current->function(current->arg);
 7e8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 7ec:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 7f0:	ed 91       	ld	r30, X+
 7f2:	fc 91       	ld	r31, X
 7f4:	11 97       	sbiw	r26, 0x01	; 1
 7f6:	12 96       	adiw	r26, 0x02	; 2
 7f8:	8d 91       	ld	r24, X+
 7fa:	9c 91       	ld	r25, X
 7fc:	13 97       	sbiw	r26, 0x03	; 3
 7fe:	09 95       	icall
		DISABLE();
 800:	f8 94       	cli
		enqueue(current, &freeQ);
 802:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 806:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 80a:	15 96       	adiw	r26, 0x05	; 5
 80c:	1c 92       	st	X, r1
 80e:	1e 92       	st	-X, r1
 810:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 812:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 816:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 81a:	30 97       	sbiw	r30, 0x00	; 0
 81c:	11 f4       	brne	.+4      	; 0x822 <spawn+0x168>
 81e:	17 c0       	rjmp	.+46     	; 0x84e <spawn+0x194>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 820:	fc 01       	movw	r30, r24
 822:	84 81       	ldd	r24, Z+4	; 0x04
 824:	95 81       	ldd	r25, Z+5	; 0x05
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	d9 f7       	brne	.-10     	; 0x820 <spawn+0x166>
		q->next = p;
 82a:	b5 83       	std	Z+5, r27	; 0x05
 82c:	a4 83       	std	Z+4, r26	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 82e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <readyQ>
 832:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <readyQ+0x1>
	if (*queue) {
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	a1 f0       	breq	.+40     	; 0x862 <spawn+0x1a8>
		*queue = (*queue)->next;
 83a:	fc 01       	movw	r30, r24
 83c:	24 81       	ldd	r18, Z+4	; 0x04
 83e:	35 81       	ldd	r19, Z+5	; 0x05
 840:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <readyQ+0x1>
 844:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 848:	0e 94 3d 03 	call	0x67a	; 0x67a <dispatch>
 84c:	61 cf       	rjmp	.-318    	; 0x710 <spawn+0x56>


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 84e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 852:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 856:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <readyQ>
 85a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <readyQ+0x1>
	if (*queue) {
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	61 f7       	brne	.-40     	; 0x83a <spawn+0x180>
 862:	ff cf       	rjmp	.-2      	; 0x862 <spawn+0x1a8>

00000864 <yield>:
	putFirst(newp, &readyQ);
	ENABLE();
}

void yield(void) {
	DISABLE();
 864:	f8 94       	cli
	enqueue(current,&readyQ);
 866:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 86a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 86e:	fc 01       	movw	r30, r24
 870:	15 82       	std	Z+5, r1	; 0x05
 872:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 874:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <readyQ>
 878:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <readyQ+0x1>
 87c:	10 97       	sbiw	r26, 0x00	; 0
 87e:	b9 f0       	breq	.+46     	; 0x8ae <yield+0x4a>
 880:	fd 01       	movw	r30, r26
 882:	01 c0       	rjmp	.+2      	; 0x886 <yield+0x22>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 884:	f9 01       	movw	r30, r18
 886:	24 81       	ldd	r18, Z+4	; 0x04
 888:	35 81       	ldd	r19, Z+5	; 0x05
 88a:	21 15       	cp	r18, r1
 88c:	31 05       	cpc	r19, r1
 88e:	d1 f7       	brne	.-12     	; 0x884 <yield+0x20>
		q->next = p;
 890:	95 83       	std	Z+5, r25	; 0x05
 892:	84 83       	std	Z+4, r24	; 0x04
 894:	14 96       	adiw	r26, 0x04	; 4
 896:	2d 91       	ld	r18, X+
 898:	3c 91       	ld	r19, X
 89a:	15 97       	sbiw	r26, 0x05	; 5
 89c:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 89e:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <readyQ+0x1>
 8a2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
 8a6:	0e 94 3d 03 	call	0x67a	; 0x67a <dispatch>
	ENABLE();
 8aa:	78 94       	sei
}
 8ac:	08 95       	ret
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 8ae:	00 97       	sbiw	r24, 0x00	; 0
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <yield+0x50>
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <yield+0x4e>
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	f2 cf       	rjmp	.-28     	; 0x89e <yield+0x3a>

000008ba <lock>:
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	dc 01       	movw	r26, r24
	DISABLE();
 8c0:	f8 94       	cli
	if(m->locked == 0) m->locked = 1;
 8c2:	8d 91       	ld	r24, X+
 8c4:	9c 91       	ld	r25, X
 8c6:	11 97       	sbiw	r26, 0x01	; 1
 8c8:	89 2b       	or	r24, r25
 8ca:	41 f1       	breq	.+80     	; 0x91c <lock+0x62>
	else {
		enqueue(current,&(m->waitQ));
 8cc:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 8d0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 8d4:	1d 82       	std	Y+5, r1	; 0x05
 8d6:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 8d8:	12 96       	adiw	r26, 0x02	; 2
 8da:	ed 91       	ld	r30, X+
 8dc:	fc 91       	ld	r31, X
 8de:	13 97       	sbiw	r26, 0x03	; 3
 8e0:	30 97       	sbiw	r30, 0x00	; 0
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <lock+0x2e>
 8e4:	23 c0       	rjmp	.+70     	; 0x92c <lock+0x72>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 8e6:	fc 01       	movw	r30, r24
 8e8:	84 81       	ldd	r24, Z+4	; 0x04
 8ea:	95 81       	ldd	r25, Z+5	; 0x05
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	d9 f7       	brne	.-10     	; 0x8e6 <lock+0x2c>
		q->next = p;
 8f0:	d5 83       	std	Z+5, r29	; 0x05
 8f2:	c4 83       	std	Z+4, r28	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 8f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <readyQ>
 8f8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <readyQ+0x1>
	if (*queue) {
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	69 f0       	breq	.+26     	; 0x91a <lock+0x60>
		*queue = (*queue)->next;
 900:	fc 01       	movw	r30, r24
 902:	24 81       	ldd	r18, Z+4	; 0x04
 904:	35 81       	ldd	r19, Z+5	; 0x05
 906:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <readyQ+0x1>
 90a:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <readyQ>
void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
	else {
		enqueue(current,&(m->waitQ));
		dispatch(dequeue(&readyQ));
 90e:	0e 94 3d 03 	call	0x67a	; 0x67a <dispatch>
	}
	ENABLE();
 912:	78 94       	sei
}
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret
 91a:	ff cf       	rjmp	.-2      	; 0x91a <lock+0x60>
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	8d 93       	st	X+, r24
 922:	9c 93       	st	X, r25
	else {
		enqueue(current,&(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 924:	78 94       	sei
}
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 92c:	13 96       	adiw	r26, 0x03	; 3
 92e:	dc 93       	st	X, r29
 930:	ce 93       	st	-X, r28
 932:	12 97       	sbiw	r26, 0x02	; 2
 934:	df cf       	rjmp	.-66     	; 0x8f4 <lock+0x3a>

00000936 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	fc 01       	movw	r30, r24
	DISABLE();
 93c:	f8 94       	cli
	if (m->waitQ == NULL){
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	93 81       	ldd	r25, Z+3	; 0x03
 942:	89 2b       	or	r24, r25
 944:	51 f1       	breq	.+84     	; 0x99a <unlock+0x64>
		m->locked = 0;
		} else {
		enqueue(current,&readyQ);
 946:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 94a:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 94e:	1d 82       	std	Y+5, r1	; 0x05
 950:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 952:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <readyQ>
 956:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <readyQ+0x1>
 95a:	10 97       	sbiw	r26, 0x00	; 0
 95c:	11 f4       	brne	.+4      	; 0x962 <unlock+0x2c>
 95e:	23 c0       	rjmp	.+70     	; 0x9a6 <unlock+0x70>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 960:	dc 01       	movw	r26, r24
 962:	14 96       	adiw	r26, 0x04	; 4
 964:	8d 91       	ld	r24, X+
 966:	9c 91       	ld	r25, X
 968:	15 97       	sbiw	r26, 0x05	; 5
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	c9 f7       	brne	.-14     	; 0x960 <unlock+0x2a>
		q->next = p;
 96e:	15 96       	adiw	r26, 0x05	; 5
 970:	dc 93       	st	X, r29
 972:	ce 93       	st	-X, r28
 974:	14 97       	sbiw	r26, 0x04	; 4
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	93 81       	ldd	r25, Z+3	; 0x03
	if (*queue) {
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	69 f0       	breq	.+26     	; 0x998 <unlock+0x62>
		*queue = (*queue)->next;
 97e:	dc 01       	movw	r26, r24
 980:	14 96       	adiw	r26, 0x04	; 4
 982:	2d 91       	ld	r18, X+
 984:	3c 91       	ld	r19, X
 986:	15 97       	sbiw	r26, 0x05	; 5
 988:	33 83       	std	Z+3, r19	; 0x03
 98a:	22 83       	std	Z+2, r18	; 0x02
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&(m->waitQ)));
 98c:	0e 94 3d 03 	call	0x67a	; 0x67a <dispatch>
	}
	ENABLE();
 990:	78 94       	sei
}
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	08 95       	ret
 998:	ff cf       	rjmp	.-2      	; 0x998 <unlock+0x62>
}

void unlock(mutex *m) {
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
 99a:	11 82       	std	Z+1, r1	; 0x01
 99c:	10 82       	st	Z, r1
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&(m->waitQ)));
	}
	ENABLE();
 99e:	78 94       	sei
}
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 9a6:	d0 93 10 01 	sts	0x0110, r29	; 0x800110 <readyQ+0x1>
 9aa:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <readyQ>
 9ae:	e3 cf       	rjmp	.-58     	; 0x976 <unlock+0x40>

000009b0 <__fixsfsi>:
 9b0:	0e 94 df 04 	call	0x9be	; 0x9be <__fixunssfsi>
 9b4:	68 94       	set
 9b6:	b1 11       	cpse	r27, r1
 9b8:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
 9bc:	08 95       	ret

000009be <__fixunssfsi>:
 9be:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_splitA>
 9c2:	88 f0       	brcs	.+34     	; 0x9e6 <__fixunssfsi+0x28>
 9c4:	9f 57       	subi	r25, 0x7F	; 127
 9c6:	98 f0       	brcs	.+38     	; 0x9ee <__fixunssfsi+0x30>
 9c8:	b9 2f       	mov	r27, r25
 9ca:	99 27       	eor	r25, r25
 9cc:	b7 51       	subi	r27, 0x17	; 23
 9ce:	b0 f0       	brcs	.+44     	; 0x9fc <__fixunssfsi+0x3e>
 9d0:	e1 f0       	breq	.+56     	; 0xa0a <__fixunssfsi+0x4c>
 9d2:	66 0f       	add	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	88 1f       	adc	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	1a f0       	brmi	.+6      	; 0x9e2 <__fixunssfsi+0x24>
 9dc:	ba 95       	dec	r27
 9de:	c9 f7       	brne	.-14     	; 0x9d2 <__fixunssfsi+0x14>
 9e0:	14 c0       	rjmp	.+40     	; 0xa0a <__fixunssfsi+0x4c>
 9e2:	b1 30       	cpi	r27, 0x01	; 1
 9e4:	91 f0       	breq	.+36     	; 0xa0a <__fixunssfsi+0x4c>
 9e6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_zero>
 9ea:	b1 e0       	ldi	r27, 0x01	; 1
 9ec:	08 95       	ret
 9ee:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
 9f2:	67 2f       	mov	r22, r23
 9f4:	78 2f       	mov	r23, r24
 9f6:	88 27       	eor	r24, r24
 9f8:	b8 5f       	subi	r27, 0xF8	; 248
 9fa:	39 f0       	breq	.+14     	; 0xa0a <__fixunssfsi+0x4c>
 9fc:	b9 3f       	cpi	r27, 0xF9	; 249
 9fe:	cc f3       	brlt	.-14     	; 0x9f2 <__fixunssfsi+0x34>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b3 95       	inc	r27
 a08:	d9 f7       	brne	.-10     	; 0xa00 <__fixunssfsi+0x42>
 a0a:	3e f4       	brtc	.+14     	; 0xa1a <__fixunssfsi+0x5c>
 a0c:	90 95       	com	r25
 a0e:	80 95       	com	r24
 a10:	70 95       	com	r23
 a12:	61 95       	neg	r22
 a14:	7f 4f       	sbci	r23, 0xFF	; 255
 a16:	8f 4f       	sbci	r24, 0xFF	; 255
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	08 95       	ret

00000a1c <__floatunsisf>:
 a1c:	e8 94       	clt
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__floatsisf+0x12>

00000a20 <__floatsisf>:
 a20:	97 fb       	bst	r25, 7
 a22:	3e f4       	brtc	.+14     	; 0xa32 <__floatsisf+0x12>
 a24:	90 95       	com	r25
 a26:	80 95       	com	r24
 a28:	70 95       	com	r23
 a2a:	61 95       	neg	r22
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	99 23       	and	r25, r25
 a34:	a9 f0       	breq	.+42     	; 0xa60 <__floatsisf+0x40>
 a36:	f9 2f       	mov	r31, r25
 a38:	96 e9       	ldi	r25, 0x96	; 150
 a3a:	bb 27       	eor	r27, r27
 a3c:	93 95       	inc	r25
 a3e:	f6 95       	lsr	r31
 a40:	87 95       	ror	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b7 95       	ror	r27
 a48:	f1 11       	cpse	r31, r1
 a4a:	f8 cf       	rjmp	.-16     	; 0xa3c <__floatsisf+0x1c>
 a4c:	fa f4       	brpl	.+62     	; 0xa8c <__floatsisf+0x6c>
 a4e:	bb 0f       	add	r27, r27
 a50:	11 f4       	brne	.+4      	; 0xa56 <__floatsisf+0x36>
 a52:	60 ff       	sbrs	r22, 0
 a54:	1b c0       	rjmp	.+54     	; 0xa8c <__floatsisf+0x6c>
 a56:	6f 5f       	subi	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	16 c0       	rjmp	.+44     	; 0xa8c <__floatsisf+0x6c>
 a60:	88 23       	and	r24, r24
 a62:	11 f0       	breq	.+4      	; 0xa68 <__floatsisf+0x48>
 a64:	96 e9       	ldi	r25, 0x96	; 150
 a66:	11 c0       	rjmp	.+34     	; 0xa8a <__floatsisf+0x6a>
 a68:	77 23       	and	r23, r23
 a6a:	21 f0       	breq	.+8      	; 0xa74 <__floatsisf+0x54>
 a6c:	9e e8       	ldi	r25, 0x8E	; 142
 a6e:	87 2f       	mov	r24, r23
 a70:	76 2f       	mov	r23, r22
 a72:	05 c0       	rjmp	.+10     	; 0xa7e <__floatsisf+0x5e>
 a74:	66 23       	and	r22, r22
 a76:	71 f0       	breq	.+28     	; 0xa94 <__floatsisf+0x74>
 a78:	96 e8       	ldi	r25, 0x86	; 134
 a7a:	86 2f       	mov	r24, r22
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	2a f0       	brmi	.+10     	; 0xa8c <__floatsisf+0x6c>
 a82:	9a 95       	dec	r25
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	da f7       	brpl	.-10     	; 0xa82 <__floatsisf+0x62>
 a8c:	88 0f       	add	r24, r24
 a8e:	96 95       	lsr	r25
 a90:	87 95       	ror	r24
 a92:	97 f9       	bld	r25, 7
 a94:	08 95       	ret

00000a96 <floor>:
 a96:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_trunc>
 a9a:	90 f0       	brcs	.+36     	; 0xac0 <floor+0x2a>
 a9c:	9f 37       	cpi	r25, 0x7F	; 127
 a9e:	48 f4       	brcc	.+18     	; 0xab2 <floor+0x1c>
 aa0:	91 11       	cpse	r25, r1
 aa2:	16 f0       	brts	.+4      	; 0xaa8 <floor+0x12>
 aa4:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	80 e8       	ldi	r24, 0x80	; 128
 aae:	9f eb       	ldi	r25, 0xBF	; 191
 ab0:	08 95       	ret
 ab2:	26 f4       	brtc	.+8      	; 0xabc <floor+0x26>
 ab4:	1b 16       	cp	r1, r27
 ab6:	61 1d       	adc	r22, r1
 ab8:	71 1d       	adc	r23, r1
 aba:	81 1d       	adc	r24, r1
 abc:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_mintl>
 ac0:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_mpack>

00000ac4 <__fp_mintl>:
 ac4:	88 23       	and	r24, r24
 ac6:	71 f4       	brne	.+28     	; 0xae4 <__fp_mintl+0x20>
 ac8:	77 23       	and	r23, r23
 aca:	21 f0       	breq	.+8      	; 0xad4 <__fp_mintl+0x10>
 acc:	98 50       	subi	r25, 0x08	; 8
 ace:	87 2b       	or	r24, r23
 ad0:	76 2f       	mov	r23, r22
 ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__fp_mintl+0x1e>
 ad4:	66 23       	and	r22, r22
 ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_mintl+0x18>
 ad8:	99 27       	eor	r25, r25
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <__fp_mintl+0x32>
 adc:	90 51       	subi	r25, 0x10	; 16
 ade:	86 2b       	or	r24, r22
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	2a f0       	brmi	.+10     	; 0xaf0 <__fp_mintl+0x2c>
 ae6:	9a 95       	dec	r25
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	da f7       	brpl	.-10     	; 0xae6 <__fp_mintl+0x22>
 af0:	88 0f       	add	r24, r24
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__fp_mpack>:
 afa:	9f 3f       	cpi	r25, 0xFF	; 255
 afc:	31 f0       	breq	.+12     	; 0xb0a <__fp_mpack_finite+0xc>

00000afe <__fp_mpack_finite>:
 afe:	91 50       	subi	r25, 0x01	; 1
 b00:	20 f4       	brcc	.+8      	; 0xb0a <__fp_mpack_finite+0xc>
 b02:	87 95       	ror	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	b7 95       	ror	r27
 b0a:	88 0f       	add	r24, r24
 b0c:	91 1d       	adc	r25, r1
 b0e:	96 95       	lsr	r25
 b10:	87 95       	ror	r24
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret

00000b16 <__fp_split3>:
 b16:	57 fd       	sbrc	r21, 7
 b18:	90 58       	subi	r25, 0x80	; 128
 b1a:	44 0f       	add	r20, r20
 b1c:	55 1f       	adc	r21, r21
 b1e:	59 f0       	breq	.+22     	; 0xb36 <__fp_splitA+0x10>
 b20:	5f 3f       	cpi	r21, 0xFF	; 255
 b22:	71 f0       	breq	.+28     	; 0xb40 <__fp_splitA+0x1a>
 b24:	47 95       	ror	r20

00000b26 <__fp_splitA>:
 b26:	88 0f       	add	r24, r24
 b28:	97 fb       	bst	r25, 7
 b2a:	99 1f       	adc	r25, r25
 b2c:	61 f0       	breq	.+24     	; 0xb46 <__fp_splitA+0x20>
 b2e:	9f 3f       	cpi	r25, 0xFF	; 255
 b30:	79 f0       	breq	.+30     	; 0xb50 <__fp_splitA+0x2a>
 b32:	87 95       	ror	r24
 b34:	08 95       	ret
 b36:	12 16       	cp	r1, r18
 b38:	13 06       	cpc	r1, r19
 b3a:	14 06       	cpc	r1, r20
 b3c:	55 1f       	adc	r21, r21
 b3e:	f2 cf       	rjmp	.-28     	; 0xb24 <__fp_split3+0xe>
 b40:	46 95       	lsr	r20
 b42:	f1 df       	rcall	.-30     	; 0xb26 <__fp_splitA>
 b44:	08 c0       	rjmp	.+16     	; 0xb56 <__fp_splitA+0x30>
 b46:	16 16       	cp	r1, r22
 b48:	17 06       	cpc	r1, r23
 b4a:	18 06       	cpc	r1, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	f1 cf       	rjmp	.-30     	; 0xb32 <__fp_splitA+0xc>
 b50:	86 95       	lsr	r24
 b52:	71 05       	cpc	r23, r1
 b54:	61 05       	cpc	r22, r1
 b56:	08 94       	sec
 b58:	08 95       	ret

00000b5a <__fp_trunc>:
 b5a:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_splitA>
 b5e:	a0 f0       	brcs	.+40     	; 0xb88 <__fp_trunc+0x2e>
 b60:	be e7       	ldi	r27, 0x7E	; 126
 b62:	b9 17       	cp	r27, r25
 b64:	88 f4       	brcc	.+34     	; 0xb88 <__fp_trunc+0x2e>
 b66:	bb 27       	eor	r27, r27
 b68:	9f 38       	cpi	r25, 0x8F	; 143
 b6a:	60 f4       	brcc	.+24     	; 0xb84 <__fp_trunc+0x2a>
 b6c:	16 16       	cp	r1, r22
 b6e:	b1 1d       	adc	r27, r1
 b70:	67 2f       	mov	r22, r23
 b72:	78 2f       	mov	r23, r24
 b74:	88 27       	eor	r24, r24
 b76:	98 5f       	subi	r25, 0xF8	; 248
 b78:	f7 cf       	rjmp	.-18     	; 0xb68 <__fp_trunc+0xe>
 b7a:	86 95       	lsr	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b1 1d       	adc	r27, r1
 b82:	93 95       	inc	r25
 b84:	96 39       	cpi	r25, 0x96	; 150
 b86:	c8 f3       	brcs	.-14     	; 0xb7a <__fp_trunc+0x20>
 b88:	08 95       	ret

00000b8a <__fp_zero>:
 b8a:	e8 94       	clt

00000b8c <__fp_szero>:
 b8c:	bb 27       	eor	r27, r27
 b8e:	66 27       	eor	r22, r22
 b90:	77 27       	eor	r23, r23
 b92:	cb 01       	movw	r24, r22
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret

00000b98 <__divmodsi4>:
 b98:	05 2e       	mov	r0, r21
 b9a:	97 fb       	bst	r25, 7
 b9c:	1e f4       	brtc	.+6      	; 0xba4 <__divmodsi4+0xc>
 b9e:	00 94       	com	r0
 ba0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__negsi2>
 ba4:	57 fd       	sbrc	r21, 7
 ba6:	07 d0       	rcall	.+14     	; 0xbb6 <__divmodsi4_neg2>
 ba8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__udivmodsi4>
 bac:	07 fc       	sbrc	r0, 7
 bae:	03 d0       	rcall	.+6      	; 0xbb6 <__divmodsi4_neg2>
 bb0:	4e f4       	brtc	.+18     	; 0xbc4 <__divmodsi4_exit>
 bb2:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__negsi2>

00000bb6 <__divmodsi4_neg2>:
 bb6:	50 95       	com	r21
 bb8:	40 95       	com	r20
 bba:	30 95       	com	r19
 bbc:	21 95       	neg	r18
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	4f 4f       	sbci	r20, 0xFF	; 255
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255

00000bc4 <__divmodsi4_exit>:
 bc4:	08 95       	ret

00000bc6 <__negsi2>:
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__tablejump2__>:
 bd6:	ee 0f       	add	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	05 90       	lpm	r0, Z+
 bdc:	f4 91       	lpm	r31, Z
 bde:	e0 2d       	mov	r30, r0
 be0:	09 94       	ijmp

00000be2 <__udivmodsi4>:
 be2:	a1 e2       	ldi	r26, 0x21	; 33
 be4:	1a 2e       	mov	r1, r26
 be6:	aa 1b       	sub	r26, r26
 be8:	bb 1b       	sub	r27, r27
 bea:	fd 01       	movw	r30, r26
 bec:	0d c0       	rjmp	.+26     	; 0xc08 <__udivmodsi4_ep>

00000bee <__udivmodsi4_loop>:
 bee:	aa 1f       	adc	r26, r26
 bf0:	bb 1f       	adc	r27, r27
 bf2:	ee 1f       	adc	r30, r30
 bf4:	ff 1f       	adc	r31, r31
 bf6:	a2 17       	cp	r26, r18
 bf8:	b3 07       	cpc	r27, r19
 bfa:	e4 07       	cpc	r30, r20
 bfc:	f5 07       	cpc	r31, r21
 bfe:	20 f0       	brcs	.+8      	; 0xc08 <__udivmodsi4_ep>
 c00:	a2 1b       	sub	r26, r18
 c02:	b3 0b       	sbc	r27, r19
 c04:	e4 0b       	sbc	r30, r20
 c06:	f5 0b       	sbc	r31, r21

00000c08 <__udivmodsi4_ep>:
 c08:	66 1f       	adc	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24
 c0e:	99 1f       	adc	r25, r25
 c10:	1a 94       	dec	r1
 c12:	69 f7       	brne	.-38     	; 0xbee <__udivmodsi4_loop>
 c14:	60 95       	com	r22
 c16:	70 95       	com	r23
 c18:	80 95       	com	r24
 c1a:	90 95       	com	r25
 c1c:	9b 01       	movw	r18, r22
 c1e:	ac 01       	movw	r20, r24
 c20:	bd 01       	movw	r22, r26
 c22:	cf 01       	movw	r24, r30
 c24:	08 95       	ret

00000c26 <setjmp>:
 c26:	dc 01       	movw	r26, r24
 c28:	2d 92       	st	X+, r2
 c2a:	3d 92       	st	X+, r3
 c2c:	4d 92       	st	X+, r4
 c2e:	5d 92       	st	X+, r5
 c30:	6d 92       	st	X+, r6
 c32:	7d 92       	st	X+, r7
 c34:	8d 92       	st	X+, r8
 c36:	9d 92       	st	X+, r9
 c38:	ad 92       	st	X+, r10
 c3a:	bd 92       	st	X+, r11
 c3c:	cd 92       	st	X+, r12
 c3e:	dd 92       	st	X+, r13
 c40:	ed 92       	st	X+, r14
 c42:	fd 92       	st	X+, r15
 c44:	0d 93       	st	X+, r16
 c46:	1d 93       	st	X+, r17
 c48:	cd 93       	st	X+, r28
 c4a:	dd 93       	st	X+, r29
 c4c:	ff 91       	pop	r31
 c4e:	ef 91       	pop	r30
 c50:	8d b7       	in	r24, 0x3d	; 61
 c52:	8d 93       	st	X+, r24
 c54:	8e b7       	in	r24, 0x3e	; 62
 c56:	8d 93       	st	X+, r24
 c58:	8f b7       	in	r24, 0x3f	; 63
 c5a:	8d 93       	st	X+, r24
 c5c:	ed 93       	st	X+, r30
 c5e:	fd 93       	st	X+, r31
 c60:	88 27       	eor	r24, r24
 c62:	99 27       	eor	r25, r25
 c64:	09 94       	ijmp

00000c66 <longjmp>:
 c66:	dc 01       	movw	r26, r24
 c68:	cb 01       	movw	r24, r22
 c6a:	81 30       	cpi	r24, 0x01	; 1
 c6c:	91 05       	cpc	r25, r1
 c6e:	81 1d       	adc	r24, r1
 c70:	2d 90       	ld	r2, X+
 c72:	3d 90       	ld	r3, X+
 c74:	4d 90       	ld	r4, X+
 c76:	5d 90       	ld	r5, X+
 c78:	6d 90       	ld	r6, X+
 c7a:	7d 90       	ld	r7, X+
 c7c:	8d 90       	ld	r8, X+
 c7e:	9d 90       	ld	r9, X+
 c80:	ad 90       	ld	r10, X+
 c82:	bd 90       	ld	r11, X+
 c84:	cd 90       	ld	r12, X+
 c86:	dd 90       	ld	r13, X+
 c88:	ed 90       	ld	r14, X+
 c8a:	fd 90       	ld	r15, X+
 c8c:	0d 91       	ld	r16, X+
 c8e:	1d 91       	ld	r17, X+
 c90:	cd 91       	ld	r28, X+
 c92:	dd 91       	ld	r29, X+
 c94:	ed 91       	ld	r30, X+
 c96:	fd 91       	ld	r31, X+
 c98:	0d 90       	ld	r0, X+
 c9a:	f8 94       	cli
 c9c:	fe bf       	out	0x3e, r31	; 62
 c9e:	0f be       	out	0x3f, r0	; 63
 ca0:	ed bf       	out	0x3d, r30	; 61
 ca2:	ed 91       	ld	r30, X+
 ca4:	fd 91       	ld	r31, X+
 ca6:	09 94       	ijmp

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
