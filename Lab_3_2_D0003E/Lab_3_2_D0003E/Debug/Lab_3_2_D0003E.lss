
Lab_3_2_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000234  00800104  00800104  00000be2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017aa  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c28  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afa  00000000  00000000  000030de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00003ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001697  00000000  00000000  00004476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	f5 00       	.word	0x00f5	; ????
  5e:	4b 01       	movw	r8, r22
  60:	54 01       	movw	r10, r8
  62:	5d 01       	movw	r10, r26
  64:	66 01       	movw	r12, r12
  66:	6f 01       	movw	r12, r30
  68:	78 01       	movw	r14, r16
  6a:	81 01       	movw	r16, r2
  6c:	8a 01       	movw	r16, r20
  6e:	93 01       	movw	r18, r6

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e4       	ldi	r30, 0x4A	; 74
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 33       	cpi	r26, 0x38	; 56
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  a6:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 a0 04 	call	0x940	; 0x940 <lock>
  b6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switchLight>
  ba:	88 23       	and	r24, r24
  bc:	91 f0       	breq	.+36     	; 0xe2 <blink+0x34>
  be:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  c2:	89 7f       	andi	r24, 0xF9	; 249
  c4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  c8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  cc:	86 60       	ori	r24, 0x06	; 6
  ce:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 a0 04 	call	0x940	; 0x940 <lock>
  da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switchLight>
  de:	81 11       	cpse	r24, r1
  e0:	ee cf       	rjmp	.-36     	; 0xbe <blink+0x10>
  e2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  e6:	89 7f       	andi	r24, 0xF9	; 249
  e8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  ec:	e0 cf       	rjmp	.-64     	; 0xae <blink>

000000ee <__vector_7>:
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
 110:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <switchLight>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	89 27       	eor	r24, r25
 118:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switchLight>
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 de 04 	call	0x9bc	; 0x9bc <unlock>
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_3>:
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
 168:	1f 99       	sbic	0x03, 7	; 3
 16a:	19 c0       	rjmp	.+50     	; 0x19e <__vector_3+0x58>
 16c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <numbPress>
 170:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <numbPress+0x1>
 174:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <numbPress+0x2>
 178:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <numbPress+0x3>
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	a1 1d       	adc	r26, r1
 180:	b1 1d       	adc	r27, r1
 182:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <numbPress>
 186:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <numbPress+0x1>
 18a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <numbPress+0x2>
 18e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <numbPress+0x3>
 192:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	89 27       	eor	r24, r25
 19a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 de 04 	call	0x9bc	; 0x9bc <unlock>
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <writeChar>:
	return false;
	
}


int writeChar(char ch, int pos){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	f0 97       	sbiw	r30, 0x30	; 48
 1d2:	ea 30       	cpi	r30, 0x0A	; 10
 1d4:	f1 05       	cpc	r31, r1
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <writeChar+0x1a>
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	default:
		return 2;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 1;
	}
	return 0;
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret


int writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 1e2:	e2 5d       	subi	r30, 0xD2	; 210
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
 1ee:	e5 e0       	ldi	r30, 0x05	; 5
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 1f2:	45 e0       	ldi	r20, 0x05	; 5
 1f4:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 1fa:	62 30       	cpi	r22, 0x02	; 2
 1fc:	71 05       	cpc	r23, r1
 1fe:	09 f4       	brne	.+2      	; 0x202 <writeChar+0x3a>
 200:	45 c1       	rjmp	.+650    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 202:	0c f4       	brge	.+2      	; 0x206 <writeChar+0x3e>
 204:	99 c0       	rjmp	.+306    	; 0x338 <writeChar+0x170>
 206:	64 30       	cpi	r22, 0x04	; 4
 208:	71 05       	cpc	r23, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <writeChar+0x46>
 20c:	18 c1       	rjmp	.+560    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 20e:	0c f4       	brge	.+2      	; 0x212 <writeChar+0x4a>
 210:	e0 c0       	rjmp	.+448    	; 0x3d2 <writeChar+0x20a>
 212:	65 30       	cpi	r22, 0x05	; 5
 214:	71 05       	cpc	r23, r1
 216:	09 f0       	breq	.+2      	; 0x21a <writeChar+0x52>
 218:	d7 c0       	rjmp	.+430    	; 0x3c8 <writeChar+0x200>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
 21a:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 21e:	6f 76       	andi	r22, 0x6F	; 111
 220:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 224:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 228:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 22a:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 22e:	82 95       	swap	r24
 230:	92 95       	swap	r25
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	98 27       	eor	r25, r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	98 27       	eor	r25, r24
 23a:	86 2b       	or	r24, r22
 23c:	87 2b       	or	r24, r23
 23e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 242:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 246:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 248:	42 95       	swap	r20
 24a:	52 95       	swap	r21
 24c:	50 7f       	andi	r21, 0xF0	; 240
 24e:	54 27       	eor	r21, r20
 250:	40 7f       	andi	r20, 0xF0	; 240
 252:	54 27       	eor	r21, r20
 254:	48 2b       	or	r20, r24
 256:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 25a:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 25e:	4f 70       	andi	r20, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 260:	cf 01       	movw	r24, r30
 262:	82 95       	swap	r24
 264:	92 95       	swap	r25
 266:	90 7f       	andi	r25, 0xF0	; 240
 268:	98 27       	eor	r25, r24
 26a:	80 7f       	andi	r24, 0xF0	; 240
 26c:	98 27       	eor	r25, r24
 26e:	84 2b       	or	r24, r20
 270:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 274:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 278:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 27a:	22 95       	swap	r18
 27c:	32 95       	swap	r19
 27e:	30 7f       	andi	r19, 0xF0	; 240
 280:	32 27       	eor	r19, r18
 282:	20 7f       	andi	r18, 0xF0	; 240
 284:	32 27       	eor	r19, r18
 286:	28 2b       	or	r18, r24
 288:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		return 1;
	}
	return 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 29a:	e1 e0       	ldi	r30, 0x01	; 1
 29c:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a9 cf       	rjmp	.-174    	; 0x1fa <writeChar+0x32>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
 2ac:	ee e0       	ldi	r30, 0x0E	; 14
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
 2b8:	a0 cf       	rjmp	.-192    	; 0x1fa <writeChar+0x32>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
 2be:	eb e0       	ldi	r30, 0x0B	; 11
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2ca:	97 cf       	rjmp	.-210    	; 0x1fa <writeChar+0x32>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 2d0:	eb e0       	ldi	r30, 0x0B	; 11
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
 2d4:	45 e0       	ldi	r20, 0x05	; 5
 2d6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
 2dc:	8e cf       	rjmp	.-228    	; 0x1fa <writeChar+0x32>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
 2e2:	eb e0       	ldi	r30, 0x0B	; 11
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 2e6:	44 e0       	ldi	r20, 0x04	; 4
 2e8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2ee:	85 cf       	rjmp	.-246    	; 0x1fa <writeChar+0x32>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
 2f4:	ef e0       	ldi	r30, 0x0F	; 15
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 2f8:	44 e0       	ldi	r20, 0x04	; 4
 2fa:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 300:	7c cf       	rjmp	.-264    	; 0x1fa <writeChar+0x32>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
 312:	73 cf       	rjmp	.-282    	; 0x1fa <writeChar+0x32>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
 318:	ef e0       	ldi	r30, 0x0F	; 15
 31a:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 31c:	45 e0       	ldi	r20, 0x05	; 5
 31e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 324:	6a cf       	rjmp	.-300    	; 0x1fa <writeChar+0x32>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 32a:	eb e0       	ldi	r30, 0x0B	; 11
 32c:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 32e:	45 e0       	ldi	r20, 0x05	; 5
 330:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 336:	61 cf       	rjmp	.-318    	; 0x1fa <writeChar+0x32>
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 338:	61 15       	cp	r22, r1
 33a:	71 05       	cpc	r23, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <writeChar+0x178>
 33e:	c5 c0       	rjmp	.+394    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	71 05       	cpc	r23, r1
 344:	09 f0       	breq	.+2      	; 0x348 <writeChar+0x180>
 346:	40 c0       	rjmp	.+128    	; 0x3c8 <writeChar+0x200>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
 348:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 34c:	6f 76       	andi	r22, 0x6F	; 111
 34e:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 352:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 356:	7f 70       	andi	r23, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 358:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 35c:	82 95       	swap	r24
 35e:	92 95       	swap	r25
 360:	90 7f       	andi	r25, 0xF0	; 240
 362:	98 27       	eor	r25, r24
 364:	80 7f       	andi	r24, 0xF0	; 240
 366:	98 27       	eor	r25, r24
 368:	ec 01       	movw	r28, r24
 36a:	c7 2b       	or	r28, r23
 36c:	be 01       	movw	r22, r28
 36e:	6a 2b       	or	r22, r26
 370:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 374:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 378:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 37a:	42 95       	swap	r20
 37c:	52 95       	swap	r21
 37e:	50 7f       	andi	r21, 0xF0	; 240
 380:	54 27       	eor	r21, r20
 382:	40 7f       	andi	r20, 0xF0	; 240
 384:	54 27       	eor	r21, r20
 386:	48 2b       	or	r20, r24
 388:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 38c:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 390:	4f 70       	andi	r20, 0x0F	; 15
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 392:	cf 01       	movw	r24, r30
 394:	82 95       	swap	r24
 396:	92 95       	swap	r25
 398:	90 7f       	andi	r25, 0xF0	; 240
 39a:	98 27       	eor	r25, r24
 39c:	80 7f       	andi	r24, 0xF0	; 240
 39e:	98 27       	eor	r25, r24
 3a0:	84 2b       	or	r24, r20
 3a2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 3a6:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3aa:	8f 70       	andi	r24, 0x0F	; 15
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 3ac:	22 95       	swap	r18
 3ae:	32 95       	swap	r19
 3b0:	30 7f       	andi	r19, 0xF0	; 240
 3b2:	32 27       	eor	r19, r18
 3b4:	20 7f       	andi	r18, 0xF0	; 240
 3b6:	32 27       	eor	r19, r18
 3b8:	28 2b       	or	r18, r24
 3ba:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 3d2:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3d6:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 3d8:	82 95       	swap	r24
 3da:	92 95       	swap	r25
 3dc:	90 7f       	andi	r25, 0xF0	; 240
 3de:	98 27       	eor	r25, r24
 3e0:	80 7f       	andi	r24, 0xF0	; 240
 3e2:	98 27       	eor	r25, r24
 3e4:	86 2b       	or	r24, r22
 3e6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 3ea:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3ee:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 3f0:	42 95       	swap	r20
 3f2:	52 95       	swap	r21
 3f4:	50 7f       	andi	r21, 0xF0	; 240
 3f6:	54 27       	eor	r21, r20
 3f8:	40 7f       	andi	r20, 0xF0	; 240
 3fa:	54 27       	eor	r21, r20
 3fc:	48 2b       	or	r20, r24
 3fe:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 402:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 406:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 408:	cf 01       	movw	r24, r30
 40a:	82 95       	swap	r24
 40c:	92 95       	swap	r25
 40e:	90 7f       	andi	r25, 0xF0	; 240
 410:	98 27       	eor	r25, r24
 412:	80 7f       	andi	r24, 0xF0	; 240
 414:	98 27       	eor	r25, r24
 416:	84 2b       	or	r24, r20
 418:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 41c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 420:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 422:	22 95       	swap	r18
 424:	32 95       	swap	r19
 426:	30 7f       	andi	r19, 0xF0	; 240
 428:	32 27       	eor	r19, r18
 42a:	20 7f       	andi	r18, 0xF0	; 240
 42c:	32 27       	eor	r19, r18
 42e:	28 2b       	or	r18, r24
 430:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
 43e:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 442:	66 7f       	andi	r22, 0xF6	; 246
 444:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 448:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 44c:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 44e:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 452:	86 2b       	or	r24, r22
 454:	87 2b       	or	r24, r23
 456:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 45a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 45e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 460:	48 2b       	or	r20, r24
 462:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 466:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 46a:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 46c:	ef 01       	movw	r28, r30
 46e:	c8 2b       	or	r28, r24
 470:	ce 01       	movw	r24, r28
 472:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 476:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 47a:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 47c:	28 2b       	or	r18, r24
 47e:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 48c:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 490:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 492:	86 2b       	or	r24, r22
 494:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 498:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 49c:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 49e:	48 2b       	or	r20, r24
 4a0:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 4a4:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4a8:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 4aa:	af 01       	movw	r20, r30
 4ac:	48 2b       	or	r20, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 4b4:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4b8:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 4ba:	28 2b       	or	r18, r24
 4bc:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
 4ca:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 4ce:	66 7f       	andi	r22, 0xF6	; 246
 4d0:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 4d4:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4d8:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 4da:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 4de:	86 2b       	or	r24, r22
 4e0:	87 2b       	or	r24, r23
 4e2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 4e6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4ea:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 4ec:	48 2b       	or	r20, r24
 4ee:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 4f2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 4f6:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 4f8:	af 01       	movw	r20, r30
 4fa:	48 2b       	or	r20, r24
 4fc:	ca 01       	movw	r24, r20
 4fe:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 502:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 506:	80 7f       	andi	r24, 0xF0	; 240
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 508:	28 2b       	or	r18, r24
 50a:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <printAt>:

bool switchLight = false;
long numbPress = 0;
bool toggle = false;

void printAt(long num, int pos) {
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	4b 01       	movw	r8, r22
 52e:	5c 01       	movw	r10, r24
 530:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 532:	24 e6       	ldi	r18, 0x64	; 100
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divmodsi4>
 53e:	2a e0       	ldi	r18, 0x0A	; 10
 540:	c2 2e       	mov	r12, r18
 542:	d1 2c       	mov	r13, r1
 544:	e1 2c       	mov	r14, r1
 546:	f1 2c       	mov	r15, r1
 548:	a7 01       	movw	r20, r14
 54a:	96 01       	movw	r18, r12
 54c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divmodsi4>
 550:	be 01       	movw	r22, r28
 552:	80 e3       	ldi	r24, 0x30	; 48
 554:	82 0f       	add	r24, r18
 556:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 55a:	21 96       	adiw	r28, 0x01	; 1
 55c:	c5 01       	movw	r24, r10
 55e:	b4 01       	movw	r22, r8
 560:	a7 01       	movw	r20, r14
 562:	96 01       	movw	r18, r12
 564:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divmodsi4>
 568:	86 2f       	mov	r24, r22
 56a:	be 01       	movw	r22, r28
 56c:	80 5d       	subi	r24, 0xD0	; 208
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	df 90       	pop	r13
 578:	cf 90       	pop	r12
 57a:	bf 90       	pop	r11
 57c:	af 90       	pop	r10
 57e:	9f 90       	pop	r9
 580:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
 582:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <writeChar>

00000586 <button>:
}

void button() {
	unsigned char i;
	while(1) {
		lock(&but);
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 a0 04 	call	0x940	; 0x940 <lock>
		printAt(numbPress, 4);
 58e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <numbPress>
 592:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <numbPress+0x1>
 596:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <numbPress+0x2>
 59a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <numbPress+0x3>
 59e:	44 e0       	ldi	r20, 0x04	; 4
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
		i = (PINB & 0x80);
		if (i != 0x80) {
 5a6:	1f 99       	sbic	0x03, 7	; 3
 5a8:	ee cf       	rjmp	.-36     	; 0x586 <button>
			if(toggle) {
 5aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5ae:	88 23       	and	r24, r24
 5b0:	59 f0       	breq	.+22     	; 0x5c8 <button+0x42>
				LCDDR2 &= 0x9F;
 5b2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5b6:	8f 79       	andi	r24, 0x9F	; 159
 5b8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
				LCDDR2 |= 0x06;
 5bc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5c0:	86 60       	ori	r24, 0x06	; 6
 5c2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5c6:	df cf       	rjmp	.-66     	; 0x586 <button>
			} else {
				LCDDR2 &= 0xF9;
 5c8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5cc:	89 7f       	andi	r24, 0xF9	; 249
 5ce:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
				LCDDR2 |= 0x60;
 5d2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5d6:	80 66       	ori	r24, 0x60	; 96
 5d8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 5dc:	d4 cf       	rjmp	.-88     	; 0x586 <button>

000005de <primes>:
		i = floor(i / 10);
		n += 1;
	}	
}

void primes() {
 5de:	4f 92       	push	r4
 5e0:	5f 92       	push	r5
 5e2:	6f 92       	push	r6
 5e4:	7f 92       	push	r7
 5e6:	8f 92       	push	r8
 5e8:	9f 92       	push	r9
 5ea:	af 92       	push	r10
 5ec:	bf 92       	push	r11
 5ee:	cf 92       	push	r12
 5f0:	df 92       	push	r13
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
	for(long count=0; count < 50000; count+= 1) {
 5f6:	41 2c       	mov	r4, r1
 5f8:	51 2c       	mov	r5, r1
 5fa:	32 01       	movw	r6, r4
 5fc:	53 01       	movw	r10, r6
 5fe:	42 01       	movw	r8, r4
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	88 1a       	sub	r8, r24
 604:	98 0a       	sbc	r9, r24
 606:	a8 0a       	sbc	r10, r24
 608:	b8 0a       	sbc	r11, r24
 60a:	80 e5       	ldi	r24, 0x50	; 80
 60c:	88 16       	cp	r8, r24
 60e:	83 ec       	ldi	r24, 0xC3	; 195
 610:	98 06       	cpc	r9, r24
 612:	a1 04       	cpc	r10, r1
 614:	b1 04       	cpc	r11, r1
 616:	b1 f1       	breq	.+108    	; 0x684 <primes+0xa6>
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 618:	80 fe       	sbrs	r8, 0
 61a:	28 c0       	rjmp	.+80     	; 0x66c <primes+0x8e>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	88 16       	cp	r8, r24
 620:	91 04       	cpc	r9, r1
 622:	a1 04       	cpc	r10, r1
 624:	b1 04       	cpc	r11, r1
 626:	11 f1       	breq	.+68     	; 0x66c <primes+0x8e>
		if (i - 1 == n) return true;
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	88 16       	cp	r8, r24
 62c:	91 04       	cpc	r9, r1
 62e:	a1 04       	cpc	r10, r1
 630:	b1 04       	cpc	r11, r1
 632:	f9 f0       	breq	.+62     	; 0x672 <primes+0x94>
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	c8 2e       	mov	r12, r24
 638:	d1 2c       	mov	r13, r1
 63a:	e1 2c       	mov	r14, r1
 63c:	f1 2c       	mov	r15, r1
 63e:	0c c0       	rjmp	.+24     	; 0x658 <primes+0x7a>
 640:	d7 01       	movw	r26, r14
 642:	c6 01       	movw	r24, r12
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	a1 1d       	adc	r26, r1
 648:	b1 1d       	adc	r27, r1
 64a:	c4 14       	cp	r12, r4
 64c:	d5 04       	cpc	r13, r5
 64e:	e6 04       	cpc	r14, r6
 650:	f7 04       	cpc	r15, r7
 652:	79 f0       	breq	.+30     	; 0x672 <primes+0x94>
 654:	6c 01       	movw	r12, r24
 656:	7d 01       	movw	r14, r26
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 658:	c5 01       	movw	r24, r10
 65a:	b4 01       	movw	r22, r8
 65c:	a7 01       	movw	r20, r14
 65e:	96 01       	movw	r18, r12
 660:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divmodsi4>
 664:	67 2b       	or	r22, r23
 666:	68 2b       	or	r22, r24
 668:	69 2b       	or	r22, r25
 66a:	51 f7       	brne	.-44     	; 0x640 <primes+0x62>
		if (i - 1 == n) return true;
 66c:	24 01       	movw	r4, r8
 66e:	35 01       	movw	r6, r10
 670:	c5 cf       	rjmp	.-118    	; 0x5fc <primes+0x1e>
}

void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			printAt(count, 0);
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	c5 01       	movw	r24, r10
 678:	b4 01       	movw	r22, r8
 67a:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
		if (i - 1 == n) return true;
 67e:	24 01       	movw	r4, r8
 680:	35 01       	movw	r6, r10
 682:	bc cf       	rjmp	.-136    	; 0x5fc <primes+0x1e>
void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			printAt(count, 0);
	}
}
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	af 90       	pop	r10
 690:	9f 90       	pop	r9
 692:	8f 90       	pop	r8
 694:	7f 90       	pop	r7
 696:	6f 90       	pop	r6
 698:	5f 90       	pop	r5
 69a:	4f 90       	pop	r4
 69c:	08 95       	ret

0000069e <main>:
}


int main(void)
{
	CLKPR = 0x80;
 69e:	e1 e6       	ldi	r30, 0x61	; 97
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 e8       	ldi	r24, 0x80	; 128
 6a4:	80 83       	st	Z, r24
	CLKPR = 0x00;
 6a6:	10 82       	st	Z, r1
	primes();
}

void LCD_Init(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
 6a8:	86 e3       	ldi	r24, 0x36	; 54
 6aa:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
 6ae:	87 e0       	ldi	r24, 0x07	; 7
 6b0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
 6b4:	8f e0       	ldi	r24, 0x0F	; 15
 6b6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 6ba:	80 ec       	ldi	r24, 0xC0	; 192
 6bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 6c0:	8d e0       	ldi	r24, 0x0D	; 13
 6c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
{
	CLKPR = 0x80;
	CLKPR = 0x00;
    LCD_Init();

	lock(&bli); lock(&but);
 6c6:	80 e1       	ldi	r24, 0x10	; 16
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 a0 04 	call	0x940	; 0x940 <lock>
 6ce:	8c e0       	ldi	r24, 0x0C	; 12
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 a0 04 	call	0x940	; 0x940 <lock>
	spawn(blink, 1);
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	87 e5       	ldi	r24, 0x57	; 87
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 a0 03 	call	0x740	; 0x740 <spawn>
	yield();
 6e2:	0e 94 75 04 	call	0x8ea	; 0x8ea <yield>
	spawn(button, 2);
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	83 ec       	ldi	r24, 0xC3	; 195
 6ec:	92 e0       	ldi	r25, 0x02	; 2
 6ee:	0e 94 a0 03 	call	0x740	; 0x740 <spawn>
	yield();
 6f2:	0e 94 75 04 	call	0x8ea	; 0x8ea <yield>
	primes();
 6f6:	0e 94 ef 02 	call	0x5de	; 0x5de <primes>
}
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	08 95       	ret

00000700 <dispatch>:
		while (1) ;  // not much else to do...
	}
	return p;
}

static void dispatch(thread next) {
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	00 d0       	rcall	.+0      	; 0x706 <dispatch+0x6>
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	9a 83       	std	Y+2, r25	; 0x02
 70c:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 70e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 712:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 716:	06 96       	adiw	r24, 0x06	; 6
 718:	0e 94 62 05 	call	0xac4	; 0xac4 <setjmp>
 71c:	89 2b       	or	r24, r25
 71e:	29 f0       	breq	.+10     	; 0x72a <dispatch+0x2a>
		current = next;
		longjmp(next->context,1);
	}
}
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	08 95       	ret
	return p;
}

static void dispatch(thread next) {
	if (setjmp(current->context) == 0) {
		current = next;
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	9a 81       	ldd	r25, Y+2	; 0x02
 72e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 732:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		longjmp(next->context,1);
 736:	61 e0       	ldi	r22, 0x01	; 1
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	06 96       	adiw	r24, 0x06	; 6
 73c:	0e 94 82 05 	call	0xb04	; 0xb04 <longjmp>

00000740 <spawn>:
	}
}

void spawn(void (* function)(int), int arg) {
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	00 d0       	rcall	.+0      	; 0x746 <spawn+0x6>
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 74a:	f8 94       	cli
	if (!initialized) initialize();
 74c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <initialized>
 750:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <initialized+0x1>
 754:	23 2b       	or	r18, r19
 756:	09 f4       	brne	.+2      	; 0x75a <spawn+0x1a>
 758:	3e c0       	rjmp	.+124    	; 0x7d6 <spawn+0x96>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 75a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 75e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 762:	3a 83       	std	Y+2, r19	; 0x02
 764:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 766:	23 2b       	or	r18, r19
 768:	09 f4       	brne	.+2      	; 0x76c <spawn+0x2c>
 76a:	73 c0       	rjmp	.+230    	; 0x852 <spawn+0x112>
		*queue = (*queue)->next;
 76c:	e9 81       	ldd	r30, Y+1	; 0x01
 76e:	fa 81       	ldd	r31, Y+2	; 0x02
 770:	44 81       	ldd	r20, Z+4	; 0x04
 772:	55 81       	ldd	r21, Z+5	; 0x05
 774:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 778:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 77c:	91 83       	std	Z+1, r25	; 0x01
 77e:	80 83       	st	Z, r24
	newp->arg = arg;
 780:	73 83       	std	Z+3, r23	; 0x03
 782:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 784:	15 82       	std	Z+5, r1	; 0x05
 786:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 788:	cf 01       	movw	r24, r30
 78a:	06 96       	adiw	r24, 0x06	; 6
 78c:	0e 94 62 05 	call	0xac4	; 0xac4 <setjmp>
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	09 f4       	brne	.+2      	; 0x796 <spawn+0x56>
 794:	6b c0       	rjmp	.+214    	; 0x86c <spawn+0x12c>
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);
 796:	e9 81       	ldd	r30, Y+1	; 0x01
 798:	fa 81       	ldd	r31, Y+2	; 0x02
 79a:	36 96       	adiw	r30, 0x06	; 6
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	9a 81       	ldd	r25, Y+2	; 0x02
 7a0:	87 59       	subi	r24, 0x97	; 151
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	91 8b       	std	Z+17, r25	; 0x11
 7a6:	80 8b       	std	Z+16, r24	; 0x10
 7a8:	93 8b       	std	Z+19, r25	; 0x13
 7aa:	82 8b       	std	Z+18, r24	; 0x12

	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
 7ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <readyQ>
 7b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <readyQ+0x1>
 7b4:	00 97       	sbiw	r24, 0x00	; 0
 7b6:	09 f4       	brne	.+2      	; 0x7ba <spawn+0x7a>
 7b8:	4d c0       	rjmp	.+154    	; 0x854 <spawn+0x114>
		*queue = p;
	} else {	
		thread q = *queue;
		*queue = p;
 7ba:	e9 81       	ldd	r30, Y+1	; 0x01
 7bc:	fa 81       	ldd	r31, Y+2	; 0x02
 7be:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <readyQ+0x1>
 7c2:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <readyQ>
		p->next = q;
 7c6:	95 83       	std	Z+5, r25	; 0x05
 7c8:	84 83       	std	Z+4, r24	; 0x04
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 7ca:	78 94       	sei
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 7d6:	20 ef       	ldi	r18, 0xF0	; 240
 7d8:	31 e0       	ldi	r19, 0x01	; 1
 7da:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threads+0x5>
 7de:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threads+0x4>
 7e2:	2d e5       	ldi	r18, 0x5D	; 93
 7e4:	32 e0       	ldi	r19, 0x02	; 2
 7e6:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <threads+0x72>
 7ea:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <threads+0x71>
 7ee:	2a ec       	ldi	r18, 0xCA	; 202
 7f0:	32 e0       	ldi	r19, 0x02	; 2
 7f2:	30 93 62 02 	sts	0x0262, r19	; 0x800262 <threads+0xdf>
 7f6:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 7fa:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <threads+0x14c>
 7fe:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <threads+0x14b>


	DDRB |= (1 << DDB7);
 802:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
 804:	2f 9a       	sbi	0x05, 7	; 5
	MCUCR = (0 << PUD);
 806:	15 be       	out	0x35, r1	; 53


	EIMSK |= (1<<PCIF1);
 808:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15);
 80a:	ec e6       	ldi	r30, 0x6C	; 108
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	20 81       	ld	r18, Z
 810:	20 68       	ori	r18, 0x80	; 128
 812:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1A1);
 814:	e0 e8       	ldi	r30, 0x80	; 128
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	20 81       	ld	r18, Z
 81a:	20 68       	ori	r18, 0x80	; 128
 81c:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A);
 81e:	ef e6       	ldi	r30, 0x6F	; 111
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	20 81       	ld	r18, Z
 824:	22 60       	ori	r18, 0x02	; 2
 826:	20 83       	st	Z, r18
	
	OCR1A = 0x1E85;
 828:	25 e8       	ldi	r18, 0x85	; 133
 82a:	3e e1       	ldi	r19, 0x1E	; 30
 82c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 830:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	initialized = 1;
 834:	21 e0       	ldi	r18, 0x01	; 1
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <initialized+0x1>
 83c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <initialized>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 840:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 844:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 848:	3a 83       	std	Y+2, r19	; 0x02
 84a:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 84c:	23 2b       	or	r18, r19
 84e:	09 f0       	breq	.+2      	; 0x852 <spawn+0x112>
 850:	8d cf       	rjmp	.-230    	; 0x76c <spawn+0x2c>
 852:	ff cf       	rjmp	.-2      	; 0x852 <spawn+0x112>
	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 854:	29 81       	ldd	r18, Y+1	; 0x01
 856:	3a 81       	ldd	r19, Y+2	; 0x02
 858:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <readyQ+0x1>
 85c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <readyQ>
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 860:	78 94       	sei
}
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret
	newp = dequeue(&freeQ);
	newp->function = function;
	newp->arg = arg;
	newp->next = NULL;
	if (setjmp(newp->context) == 1) {
		ENABLE();
 86c:	78 94       	sei
		current->function(current->arg);
 86e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 872:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 876:	ed 91       	ld	r30, X+
 878:	fc 91       	ld	r31, X
 87a:	11 97       	sbiw	r26, 0x01	; 1
 87c:	12 96       	adiw	r26, 0x02	; 2
 87e:	8d 91       	ld	r24, X+
 880:	9c 91       	ld	r25, X
 882:	13 97       	sbiw	r26, 0x03	; 3
 884:	09 95       	icall
		DISABLE();
 886:	f8 94       	cli
		enqueue(current, &freeQ);
 888:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 88c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 890:	15 96       	adiw	r26, 0x05	; 5
 892:	1c 92       	st	X, r1
 894:	1e 92       	st	-X, r1
 896:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 898:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 89c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	11 f4       	brne	.+4      	; 0x8a8 <spawn+0x168>
 8a4:	17 c0       	rjmp	.+46     	; 0x8d4 <spawn+0x194>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 8a6:	fc 01       	movw	r30, r24
 8a8:	84 81       	ldd	r24, Z+4	; 0x04
 8aa:	95 81       	ldd	r25, Z+5	; 0x05
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	d9 f7       	brne	.-10     	; 0x8a6 <spawn+0x166>
		q->next = p;
 8b0:	b5 83       	std	Z+5, r27	; 0x05
 8b2:	a4 83       	std	Z+4, r26	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 8b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <readyQ>
 8b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <readyQ+0x1>
	if (*queue) {
 8bc:	00 97       	sbiw	r24, 0x00	; 0
 8be:	a1 f0       	breq	.+40     	; 0x8e8 <spawn+0x1a8>
		*queue = (*queue)->next;
 8c0:	fc 01       	movw	r30, r24
 8c2:	24 81       	ldd	r18, Z+4	; 0x04
 8c4:	35 81       	ldd	r19, Z+5	; 0x05
 8c6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <readyQ+0x1>
 8ca:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 8ce:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
 8d2:	61 cf       	rjmp	.-318    	; 0x796 <spawn+0x56>


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 8d4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 8d8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 8dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <readyQ>
 8e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <readyQ+0x1>
	if (*queue) {
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	61 f7       	brne	.-40     	; 0x8c0 <spawn+0x180>
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <spawn+0x1a8>

000008ea <yield>:
	putFirst(newp, &readyQ);
	ENABLE();
}

void yield(void) {
	DISABLE();
 8ea:	f8 94       	cli
	enqueue(current,&readyQ);
 8ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 8f4:	fc 01       	movw	r30, r24
 8f6:	15 82       	std	Z+5, r1	; 0x05
 8f8:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 8fa:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <readyQ>
 8fe:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <readyQ+0x1>
 902:	10 97       	sbiw	r26, 0x00	; 0
 904:	b9 f0       	breq	.+46     	; 0x934 <yield+0x4a>
 906:	fd 01       	movw	r30, r26
 908:	01 c0       	rjmp	.+2      	; 0x90c <yield+0x22>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 90a:	f9 01       	movw	r30, r18
 90c:	24 81       	ldd	r18, Z+4	; 0x04
 90e:	35 81       	ldd	r19, Z+5	; 0x05
 910:	21 15       	cp	r18, r1
 912:	31 05       	cpc	r19, r1
 914:	d1 f7       	brne	.-12     	; 0x90a <yield+0x20>
		q->next = p;
 916:	95 83       	std	Z+5, r25	; 0x05
 918:	84 83       	std	Z+4, r24	; 0x04
 91a:	14 96       	adiw	r26, 0x04	; 4
 91c:	2d 91       	ld	r18, X+
 91e:	3c 91       	ld	r19, X
 920:	15 97       	sbiw	r26, 0x05	; 5
 922:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 924:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <readyQ+0x1>
 928:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
 92c:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
	ENABLE();
 930:	78 94       	sei
}
 932:	08 95       	ret
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	09 f4       	brne	.+2      	; 0x93a <yield+0x50>
 938:	ff cf       	rjmp	.-2      	; 0x938 <yield+0x4e>
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	f2 cf       	rjmp	.-28     	; 0x924 <yield+0x3a>

00000940 <lock>:
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	dc 01       	movw	r26, r24
	DISABLE();
 946:	f8 94       	cli
	if(m->locked == 0) m->locked = 1;
 948:	8d 91       	ld	r24, X+
 94a:	9c 91       	ld	r25, X
 94c:	11 97       	sbiw	r26, 0x01	; 1
 94e:	89 2b       	or	r24, r25
 950:	41 f1       	breq	.+80     	; 0x9a2 <lock+0x62>
	else {
		enqueue(current,&(m->waitQ));
 952:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 956:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 95a:	1d 82       	std	Y+5, r1	; 0x05
 95c:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 95e:	12 96       	adiw	r26, 0x02	; 2
 960:	ed 91       	ld	r30, X+
 962:	fc 91       	ld	r31, X
 964:	13 97       	sbiw	r26, 0x03	; 3
 966:	30 97       	sbiw	r30, 0x00	; 0
 968:	11 f4       	brne	.+4      	; 0x96e <lock+0x2e>
 96a:	23 c0       	rjmp	.+70     	; 0x9b2 <lock+0x72>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 96c:	fc 01       	movw	r30, r24
 96e:	84 81       	ldd	r24, Z+4	; 0x04
 970:	95 81       	ldd	r25, Z+5	; 0x05
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	d9 f7       	brne	.-10     	; 0x96c <lock+0x2c>
		q->next = p;
 976:	d5 83       	std	Z+5, r29	; 0x05
 978:	c4 83       	std	Z+4, r28	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 97a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <readyQ>
 97e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <readyQ+0x1>
	if (*queue) {
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	69 f0       	breq	.+26     	; 0x9a0 <lock+0x60>
		*queue = (*queue)->next;
 986:	fc 01       	movw	r30, r24
 988:	24 81       	ldd	r18, Z+4	; 0x04
 98a:	35 81       	ldd	r19, Z+5	; 0x05
 98c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <readyQ+0x1>
 990:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <readyQ>
void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
	else {
		enqueue(current,&(m->waitQ));
		dispatch(dequeue(&readyQ));
 994:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
	}
	ENABLE();
 998:	78 94       	sei
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret
 9a0:	ff cf       	rjmp	.-2      	; 0x9a0 <lock+0x60>
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	8d 93       	st	X+, r24
 9a8:	9c 93       	st	X, r25
	else {
		enqueue(current,&(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 9aa:	78 94       	sei
}
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 9b2:	13 96       	adiw	r26, 0x03	; 3
 9b4:	dc 93       	st	X, r29
 9b6:	ce 93       	st	-X, r28
 9b8:	12 97       	sbiw	r26, 0x02	; 2
 9ba:	df cf       	rjmp	.-66     	; 0x97a <lock+0x3a>

000009bc <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	fc 01       	movw	r30, r24
	DISABLE();
 9c2:	f8 94       	cli
	if (m->waitQ == NULL){
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	93 81       	ldd	r25, Z+3	; 0x03
 9c8:	89 2b       	or	r24, r25
 9ca:	51 f1       	breq	.+84     	; 0xa20 <unlock+0x64>
		m->locked = 0;
	} else {
		enqueue(current,&readyQ);
 9cc:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 9d0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 9d4:	1d 82       	std	Y+5, r1	; 0x05
 9d6:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 9d8:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <readyQ>
 9dc:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <readyQ+0x1>
 9e0:	10 97       	sbiw	r26, 0x00	; 0
 9e2:	11 f4       	brne	.+4      	; 0x9e8 <unlock+0x2c>
 9e4:	23 c0       	rjmp	.+70     	; 0xa2c <unlock+0x70>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 9e6:	dc 01       	movw	r26, r24
 9e8:	14 96       	adiw	r26, 0x04	; 4
 9ea:	8d 91       	ld	r24, X+
 9ec:	9c 91       	ld	r25, X
 9ee:	15 97       	sbiw	r26, 0x05	; 5
 9f0:	00 97       	sbiw	r24, 0x00	; 0
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <unlock+0x2a>
		q->next = p;
 9f4:	15 96       	adiw	r26, 0x05	; 5
 9f6:	dc 93       	st	X, r29
 9f8:	ce 93       	st	-X, r28
 9fa:	14 97       	sbiw	r26, 0x04	; 4
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 9fc:	82 81       	ldd	r24, Z+2	; 0x02
 9fe:	93 81       	ldd	r25, Z+3	; 0x03
	if (*queue) {
 a00:	00 97       	sbiw	r24, 0x00	; 0
 a02:	69 f0       	breq	.+26     	; 0xa1e <unlock+0x62>
		*queue = (*queue)->next;
 a04:	dc 01       	movw	r26, r24
 a06:	14 96       	adiw	r26, 0x04	; 4
 a08:	2d 91       	ld	r18, X+
 a0a:	3c 91       	ld	r19, X
 a0c:	15 97       	sbiw	r26, 0x05	; 5
 a0e:	33 83       	std	Z+3, r19	; 0x03
 a10:	22 83       	std	Z+2, r18	; 0x02
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
	} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&(m->waitQ)));
 a12:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
	}
	ENABLE();
 a16:	78 94       	sei
}
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	08 95       	ret
 a1e:	ff cf       	rjmp	.-2      	; 0xa1e <unlock+0x62>
}

void unlock(mutex *m) {
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
 a20:	11 82       	std	Z+1, r1	; 0x01
 a22:	10 82       	st	Z, r1
	} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&(m->waitQ)));
	}
	ENABLE();
 a24:	78 94       	sei
}
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 a2c:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <readyQ+0x1>
 a30:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <readyQ>
 a34:	e3 cf       	rjmp	.-58     	; 0x9fc <unlock+0x40>

00000a36 <__divmodsi4>:
 a36:	05 2e       	mov	r0, r21
 a38:	97 fb       	bst	r25, 7
 a3a:	1e f4       	brtc	.+6      	; 0xa42 <__divmodsi4+0xc>
 a3c:	00 94       	com	r0
 a3e:	0e 94 32 05 	call	0xa64	; 0xa64 <__negsi2>
 a42:	57 fd       	sbrc	r21, 7
 a44:	07 d0       	rcall	.+14     	; 0xa54 <__divmodsi4_neg2>
 a46:	0e 94 40 05 	call	0xa80	; 0xa80 <__udivmodsi4>
 a4a:	07 fc       	sbrc	r0, 7
 a4c:	03 d0       	rcall	.+6      	; 0xa54 <__divmodsi4_neg2>
 a4e:	4e f4       	brtc	.+18     	; 0xa62 <__divmodsi4_exit>
 a50:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__negsi2>

00000a54 <__divmodsi4_neg2>:
 a54:	50 95       	com	r21
 a56:	40 95       	com	r20
 a58:	30 95       	com	r19
 a5a:	21 95       	neg	r18
 a5c:	3f 4f       	sbci	r19, 0xFF	; 255
 a5e:	4f 4f       	sbci	r20, 0xFF	; 255
 a60:	5f 4f       	sbci	r21, 0xFF	; 255

00000a62 <__divmodsi4_exit>:
 a62:	08 95       	ret

00000a64 <__negsi2>:
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__tablejump2__>:
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	05 90       	lpm	r0, Z+
 a7a:	f4 91       	lpm	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	09 94       	ijmp

00000a80 <__udivmodsi4>:
 a80:	a1 e2       	ldi	r26, 0x21	; 33
 a82:	1a 2e       	mov	r1, r26
 a84:	aa 1b       	sub	r26, r26
 a86:	bb 1b       	sub	r27, r27
 a88:	fd 01       	movw	r30, r26
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__udivmodsi4_ep>

00000a8c <__udivmodsi4_loop>:
 a8c:	aa 1f       	adc	r26, r26
 a8e:	bb 1f       	adc	r27, r27
 a90:	ee 1f       	adc	r30, r30
 a92:	ff 1f       	adc	r31, r31
 a94:	a2 17       	cp	r26, r18
 a96:	b3 07       	cpc	r27, r19
 a98:	e4 07       	cpc	r30, r20
 a9a:	f5 07       	cpc	r31, r21
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <__udivmodsi4_ep>
 a9e:	a2 1b       	sub	r26, r18
 aa0:	b3 0b       	sbc	r27, r19
 aa2:	e4 0b       	sbc	r30, r20
 aa4:	f5 0b       	sbc	r31, r21

00000aa6 <__udivmodsi4_ep>:
 aa6:	66 1f       	adc	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	1a 94       	dec	r1
 ab0:	69 f7       	brne	.-38     	; 0xa8c <__udivmodsi4_loop>
 ab2:	60 95       	com	r22
 ab4:	70 95       	com	r23
 ab6:	80 95       	com	r24
 ab8:	90 95       	com	r25
 aba:	9b 01       	movw	r18, r22
 abc:	ac 01       	movw	r20, r24
 abe:	bd 01       	movw	r22, r26
 ac0:	cf 01       	movw	r24, r30
 ac2:	08 95       	ret

00000ac4 <setjmp>:
 ac4:	dc 01       	movw	r26, r24
 ac6:	2d 92       	st	X+, r2
 ac8:	3d 92       	st	X+, r3
 aca:	4d 92       	st	X+, r4
 acc:	5d 92       	st	X+, r5
 ace:	6d 92       	st	X+, r6
 ad0:	7d 92       	st	X+, r7
 ad2:	8d 92       	st	X+, r8
 ad4:	9d 92       	st	X+, r9
 ad6:	ad 92       	st	X+, r10
 ad8:	bd 92       	st	X+, r11
 ada:	cd 92       	st	X+, r12
 adc:	dd 92       	st	X+, r13
 ade:	ed 92       	st	X+, r14
 ae0:	fd 92       	st	X+, r15
 ae2:	0d 93       	st	X+, r16
 ae4:	1d 93       	st	X+, r17
 ae6:	cd 93       	st	X+, r28
 ae8:	dd 93       	st	X+, r29
 aea:	ff 91       	pop	r31
 aec:	ef 91       	pop	r30
 aee:	8d b7       	in	r24, 0x3d	; 61
 af0:	8d 93       	st	X+, r24
 af2:	8e b7       	in	r24, 0x3e	; 62
 af4:	8d 93       	st	X+, r24
 af6:	8f b7       	in	r24, 0x3f	; 63
 af8:	8d 93       	st	X+, r24
 afa:	ed 93       	st	X+, r30
 afc:	fd 93       	st	X+, r31
 afe:	88 27       	eor	r24, r24
 b00:	99 27       	eor	r25, r25
 b02:	09 94       	ijmp

00000b04 <longjmp>:
 b04:	dc 01       	movw	r26, r24
 b06:	cb 01       	movw	r24, r22
 b08:	81 30       	cpi	r24, 0x01	; 1
 b0a:	91 05       	cpc	r25, r1
 b0c:	81 1d       	adc	r24, r1
 b0e:	2d 90       	ld	r2, X+
 b10:	3d 90       	ld	r3, X+
 b12:	4d 90       	ld	r4, X+
 b14:	5d 90       	ld	r5, X+
 b16:	6d 90       	ld	r6, X+
 b18:	7d 90       	ld	r7, X+
 b1a:	8d 90       	ld	r8, X+
 b1c:	9d 90       	ld	r9, X+
 b1e:	ad 90       	ld	r10, X+
 b20:	bd 90       	ld	r11, X+
 b22:	cd 90       	ld	r12, X+
 b24:	dd 90       	ld	r13, X+
 b26:	ed 90       	ld	r14, X+
 b28:	fd 90       	ld	r15, X+
 b2a:	0d 91       	ld	r16, X+
 b2c:	1d 91       	ld	r17, X+
 b2e:	cd 91       	ld	r28, X+
 b30:	dd 91       	ld	r29, X+
 b32:	ed 91       	ld	r30, X+
 b34:	fd 91       	ld	r31, X+
 b36:	0d 90       	ld	r0, X+
 b38:	f8 94       	cli
 b3a:	fe bf       	out	0x3e, r31	; 62
 b3c:	0f be       	out	0x3f, r0	; 63
 b3e:	ed bf       	out	0x3d, r30	; 61
 b40:	ed 91       	ld	r30, X+
 b42:	fd 91       	ld	r31, X+
 b44:	09 94       	ijmp

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
