
Lab_3_2_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c7e  00000d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000230  00800104  00800104  00000d16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001751  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c18  00000000  00000000  00002589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a95  00000000  00000000  000031a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001558  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000059d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	c3 00       	.word	0x00c3	; ????
  5e:	12 01       	movw	r2, r4
  60:	1b 01       	movw	r2, r22
  62:	24 01       	movw	r4, r8
  64:	2d 01       	movw	r4, r26
  66:	36 01       	movw	r6, r12
  68:	3f 01       	movw	r6, r30
  6a:	48 01       	movw	r8, r16
  6c:	51 01       	movw	r10, r2
  6e:	5a 01       	movw	r10, r20

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e7       	ldi	r30, 0x7E	; 126
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 33       	cpi	r26, 0x34	; 52
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
  a6:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 46 04 	call	0x88c	; 0x88c <lock>
  b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  be:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
  c2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
  c6:	82 1b       	sub	r24, r18
  c8:	93 0b       	sbc	r25, r19
  ca:	85 38       	cpi	r24, 0x85	; 133
  cc:	2e e1       	ldi	r18, 0x1E	; 30
  ce:	92 07       	cpc	r25, r18
  d0:	38 f0       	brcs	.+14     	; 0xe0 <blink+0x32>
  d2:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  de:	08 95       	ret
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  e6:	08 95       	ret

000000e8 <button>:
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 46 04 	call	0x88c	; 0x88c <lock>
  f0:	1f 99       	sbic	0x03, 7	; 3
  f2:	06 c0       	rjmp	.+12     	; 0x100 <button+0x18>
  f4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  fe:	08 95       	ret
 100:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 104:	80 66       	ori	r24, 0x60	; 96
 106:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 10a:	08 95       	ret

0000010c <__vector_3>:
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
 12e:	1f 99       	sbic	0x03, 7	; 3
 130:	08 c0       	rjmp	.+16     	; 0x142 <__vector_3+0x36>
 132:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 84 04 	call	0x908	; 0x908 <unlock>
 13e:	0e 94 1b 04 	call	0x836	; 0x836 <yield>
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <writeChar>:
	return false;
	
}


int writeChar(char ch, int pos){
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	f0 97       	sbiw	r30, 0x30	; 48
 16e:	ea 30       	cpi	r30, 0x0A	; 10
 170:	f1 05       	cpc	r31, r1
 172:	28 f0       	brcs	.+10     	; 0x17e <writeChar+0x1a>
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	default:
		return 2;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 1;
	}
	return 0;
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret


int writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 17e:	e2 5d       	subi	r30, 0xD2	; 210
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
 186:	e1 e0       	ldi	r30, 0x01	; 1
 188:	f0 e0       	ldi	r31, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
 18a:	25 e0       	ldi	r18, 0x05	; 5
 18c:	30 e0       	ldi	r19, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 18e:	45 e0       	ldi	r20, 0x05	; 5
 190:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 196:	62 30       	cpi	r22, 0x02	; 2
 198:	71 05       	cpc	r23, r1
 19a:	09 f4       	brne	.+2      	; 0x19e <writeChar+0x3a>
 19c:	30 c1       	rjmp	.+608    	; 0x3fe <writeChar+0x29a>
 19e:	0c f4       	brge	.+2      	; 0x1a2 <writeChar+0x3e>
 1a0:	92 c0       	rjmp	.+292    	; 0x2c6 <writeChar+0x162>
 1a2:	64 30       	cpi	r22, 0x04	; 4
 1a4:	71 05       	cpc	r23, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <writeChar+0x46>
 1a8:	0b c1       	rjmp	.+534    	; 0x3c0 <writeChar+0x25c>
 1aa:	0c f4       	brge	.+2      	; 0x1ae <writeChar+0x4a>
 1ac:	d3 c0       	rjmp	.+422    	; 0x354 <writeChar+0x1f0>
 1ae:	65 30       	cpi	r22, 0x05	; 5
 1b0:	71 05       	cpc	r23, r1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <writeChar+0x52>
 1b4:	ca c0       	rjmp	.+404    	; 0x34a <writeChar+0x1e6>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
 1b6:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1ba:	af 70       	andi	r26, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
 1bc:	bc 01       	movw	r22, r24
 1be:	62 95       	swap	r22
 1c0:	72 95       	swap	r23
 1c2:	70 7f       	andi	r23, 0xF0	; 240
 1c4:	76 27       	eor	r23, r22
 1c6:	60 7f       	andi	r22, 0xF0	; 240
 1c8:	76 27       	eor	r23, r22
 1ca:	6a 2b       	or	r22, r26
 1cc:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 1d0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1d4:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 1d6:	42 95       	swap	r20
 1d8:	52 95       	swap	r21
 1da:	50 7f       	andi	r21, 0xF0	; 240
 1dc:	54 27       	eor	r21, r20
 1de:	40 7f       	andi	r20, 0xF0	; 240
 1e0:	54 27       	eor	r21, r20
 1e2:	48 2b       	or	r20, r24
 1e4:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 1e8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1ec:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 1ee:	22 95       	swap	r18
 1f0:	32 95       	swap	r19
 1f2:	30 7f       	andi	r19, 0xF0	; 240
 1f4:	32 27       	eor	r19, r18
 1f6:	20 7f       	andi	r18, 0xF0	; 240
 1f8:	32 27       	eor	r19, r18
 1fa:	28 2b       	or	r18, r24
 1fc:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 200:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 204:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 206:	cf 01       	movw	r24, r30
 208:	82 95       	swap	r24
 20a:	92 95       	swap	r25
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	82 2b       	or	r24, r18
 216:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		return 1;
	}
	return 0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f0 e0       	ldi	r31, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	b0 cf       	rjmp	.-160    	; 0x196 <writeChar+0x32>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
 236:	e1 e0       	ldi	r30, 0x01	; 1
 238:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
 23a:	2e e0       	ldi	r18, 0x0E	; 14
 23c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
 246:	a7 cf       	rjmp	.-178    	; 0x196 <writeChar+0x32>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 248:	e1 e0       	ldi	r30, 0x01	; 1
 24a:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
 24c:	2b e0       	ldi	r18, 0x0B	; 11
 24e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 258:	9e cf       	rjmp	.-196    	; 0x196 <writeChar+0x32>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
 25a:	e0 e0       	ldi	r30, 0x00	; 0
 25c:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 25e:	2b e0       	ldi	r18, 0x0B	; 11
 260:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
 262:	45 e0       	ldi	r20, 0x05	; 5
 264:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
 26a:	95 cf       	rjmp	.-214    	; 0x196 <writeChar+0x32>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
 270:	2b e0       	ldi	r18, 0x0B	; 11
 272:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 274:	44 e0       	ldi	r20, 0x04	; 4
 276:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 27c:	8c cf       	rjmp	.-232    	; 0x196 <writeChar+0x32>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
 282:	2f e0       	ldi	r18, 0x0F	; 15
 284:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 286:	44 e0       	ldi	r20, 0x04	; 4
 288:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 28e:	83 cf       	rjmp	.-250    	; 0x196 <writeChar+0x32>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
 2a0:	7a cf       	rjmp	.-268    	; 0x196 <writeChar+0x32>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 2a2:	e1 e0       	ldi	r30, 0x01	; 1
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
 2a6:	2f e0       	ldi	r18, 0x0F	; 15
 2a8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 2aa:	45 e0       	ldi	r20, 0x05	; 5
 2ac:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 2b2:	71 cf       	rjmp	.-286    	; 0x196 <writeChar+0x32>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2b4:	e1 e0       	ldi	r30, 0x01	; 1
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 2b8:	2b e0       	ldi	r18, 0x0B	; 11
 2ba:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 2bc:	45 e0       	ldi	r20, 0x05	; 5
 2be:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2c4:	68 cf       	rjmp	.-304    	; 0x196 <writeChar+0x32>
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 2c6:	61 15       	cp	r22, r1
 2c8:	71 05       	cpc	r23, r1
 2ca:	09 f4       	brne	.+2      	; 0x2ce <writeChar+0x16a>
 2cc:	b7 c0       	rjmp	.+366    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 2ce:	61 30       	cpi	r22, 0x01	; 1
 2d0:	71 05       	cpc	r23, r1
 2d2:	d9 f5       	brne	.+118    	; 0x34a <writeChar+0x1e6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 2d4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 2d8:	7f 70       	andi	r23, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
 2da:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 2de:	82 95       	swap	r24
 2e0:	92 95       	swap	r25
 2e2:	90 7f       	andi	r25, 0xF0	; 240
 2e4:	98 27       	eor	r25, r24
 2e6:	80 7f       	andi	r24, 0xF0	; 240
 2e8:	98 27       	eor	r25, r24
 2ea:	ec 01       	movw	r28, r24
 2ec:	c7 2b       	or	r28, r23
 2ee:	be 01       	movw	r22, r28
 2f0:	6a 2b       	or	r22, r26
 2f2:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 2f6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 2fa:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 2fc:	42 95       	swap	r20
 2fe:	52 95       	swap	r21
 300:	50 7f       	andi	r21, 0xF0	; 240
 302:	54 27       	eor	r21, r20
 304:	40 7f       	andi	r20, 0xF0	; 240
 306:	54 27       	eor	r21, r20
 308:	48 2b       	or	r20, r24
 30a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 30e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 312:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 314:	22 95       	swap	r18
 316:	32 95       	swap	r19
 318:	30 7f       	andi	r19, 0xF0	; 240
 31a:	32 27       	eor	r19, r18
 31c:	20 7f       	andi	r18, 0xF0	; 240
 31e:	32 27       	eor	r19, r18
 320:	28 2b       	or	r18, r24
 322:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 326:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 32a:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 1:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 32c:	cf 01       	movw	r24, r30
 32e:	82 95       	swap	r24
 330:	92 95       	swap	r25
 332:	90 7f       	andi	r25, 0xF0	; 240
 334:	98 27       	eor	r25, r24
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	98 27       	eor	r25, r24
 33a:	82 2b       	or	r24, r18
 33c:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 354:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 358:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
 35a:	82 95       	swap	r24
 35c:	92 95       	swap	r25
 35e:	90 7f       	andi	r25, 0xF0	; 240
 360:	98 27       	eor	r25, r24
 362:	80 7f       	andi	r24, 0xF0	; 240
 364:	98 27       	eor	r25, r24
 366:	86 2b       	or	r24, r22
 368:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 36c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 370:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 372:	42 95       	swap	r20
 374:	52 95       	swap	r21
 376:	50 7f       	andi	r21, 0xF0	; 240
 378:	54 27       	eor	r21, r20
 37a:	40 7f       	andi	r20, 0xF0	; 240
 37c:	54 27       	eor	r21, r20
 37e:	48 2b       	or	r20, r24
 380:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 384:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 388:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 38a:	22 95       	swap	r18
 38c:	32 95       	swap	r19
 38e:	30 7f       	andi	r19, 0xF0	; 240
 390:	32 27       	eor	r19, r18
 392:	20 7f       	andi	r18, 0xF0	; 240
 394:	32 27       	eor	r19, r18
 396:	28 2b       	or	r18, r24
 398:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 39c:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 3a0:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 3a2:	cf 01       	movw	r24, r30
 3a4:	82 95       	swap	r24
 3a6:	92 95       	swap	r25
 3a8:	90 7f       	andi	r25, 0xF0	; 240
 3aa:	98 27       	eor	r25, r24
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	98 27       	eor	r25, r24
 3b0:	82 2b       	or	r24, r18
 3b2:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
 3c0:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3c4:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
 3c6:	86 2b       	or	r24, r22
 3c8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 3cc:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3d0:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 3d2:	48 2b       	or	r20, r24
 3d4:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 3d8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3dc:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 3de:	28 2b       	or	r18, r24
 3e0:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 3e4:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3e8:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 3ea:	ef 01       	movw	r28, r30
 3ec:	c8 2b       	or	r28, r24
 3ee:	ce 01       	movw	r24, r28
 3f0:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 3fe:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 402:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
 404:	86 2b       	or	r24, r22
 406:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 40a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 40e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 410:	48 2b       	or	r20, r24
 412:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 416:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 41a:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 41c:	28 2b       	or	r18, r24
 41e:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 422:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 426:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 428:	9f 01       	movw	r18, r30
 42a:	28 2b       	or	r18, r24
 42c:	c9 01       	movw	r24, r18
 42e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 43c:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 440:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
 442:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 446:	86 2b       	or	r24, r22
 448:	87 2b       	or	r24, r23
 44a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 44e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 452:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 454:	48 2b       	or	r20, r24
 456:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 45a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 45e:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 460:	28 2b       	or	r18, r24
 462:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 466:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 46a:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 46c:	9f 01       	movw	r18, r30
 46e:	28 2b       	or	r18, r24
 470:	c9 01       	movw	r24, r18
 472:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <writeLong>:
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
	
}
void writeLong(long i) {
 480:	8f 92       	push	r8
 482:	9f 92       	push	r9
 484:	af 92       	push	r10
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	c5 e0       	ldi	r28, 0x05	; 5
 496:	d0 e0       	ldi	r29, 0x00	; 0
	int n = 0;
	while (n < 6) {		// a while loop for getting the first 6 digits of a number.
		int temp = i % 10;
		writeChar((char)temp + '0', 5-n);
 498:	2a e0       	ldi	r18, 0x0A	; 10
 49a:	c2 2e       	mov	r12, r18
 49c:	d1 2c       	mov	r13, r1
 49e:	e1 2c       	mov	r14, r1
 4a0:	f1 2c       	mov	r15, r1
 4a2:	a7 01       	movw	r20, r14
 4a4:	96 01       	movw	r18, r12
 4a6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__divmodsi4>
 4aa:	49 01       	movw	r8, r18
 4ac:	5a 01       	movw	r10, r20
 4ae:	86 2f       	mov	r24, r22
 4b0:	be 01       	movw	r22, r28
 4b2:	80 5d       	subi	r24, 0xD0	; 208
 4b4:	0e 94 b2 00 	call	0x164	; 0x164 <writeChar>
		i = floor(i / 10);
 4b8:	c5 01       	movw	r24, r10
 4ba:	b4 01       	movw	r22, r8
 4bc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
 4c0:	0e 94 34 05 	call	0xa68	; 0xa68 <floor>
 4c4:	0e 94 c1 04 	call	0x982	; 0x982 <__fixsfsi>
 4c8:	21 97       	sbiw	r28, 0x01	; 1
 4ca:	58 f7       	brcc	.-42     	; 0x4a2 <writeLong+0x22>
		n += 1;
	}	
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	df 90       	pop	r13
 4d6:	cf 90       	pop	r12
 4d8:	bf 90       	pop	r11
 4da:	af 90       	pop	r10
 4dc:	9f 90       	pop	r9
 4de:	8f 90       	pop	r8
 4e0:	08 95       	ret

000004e2 <__vector_7>:
		LCDDR0 = 0x0;
		//writeLong(111111);
		lastTime = timer;
	}
}
ISR(TIMER1_COMPA_vect){
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	writeLong(111111);
 504:	67 e0       	ldi	r22, 0x07	; 7
 506:	72 eb       	ldi	r23, 0xB2	; 178
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 40 02 	call	0x480	; 0x480 <writeLong>
	unlock(&bli);
 510:	8c e0       	ldi	r24, 0x0C	; 12
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 84 04 	call	0x908	; 0x908 <unlock>
	yield();
 518:	0e 94 1b 04 	call	0x836	; 0x836 <yield>
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <primes>:
		i = floor(i / 10);
		n += 1;
	}	
}

void primes() {
 53e:	4f 92       	push	r4
 540:	5f 92       	push	r5
 542:	6f 92       	push	r6
 544:	7f 92       	push	r7
 546:	8f 92       	push	r8
 548:	9f 92       	push	r9
 54a:	af 92       	push	r10
 54c:	bf 92       	push	r11
 54e:	cf 92       	push	r12
 550:	df 92       	push	r13
 552:	ef 92       	push	r14
 554:	ff 92       	push	r15
	for(long count=0; count < 50000; count+= 1) {
 556:	41 2c       	mov	r4, r1
 558:	51 2c       	mov	r5, r1
 55a:	32 01       	movw	r6, r4
 55c:	53 01       	movw	r10, r6
 55e:	42 01       	movw	r8, r4
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	88 1a       	sub	r8, r24
 564:	98 0a       	sbc	r9, r24
 566:	a8 0a       	sbc	r10, r24
 568:	b8 0a       	sbc	r11, r24
 56a:	80 e5       	ldi	r24, 0x50	; 80
 56c:	88 16       	cp	r8, r24
 56e:	83 ec       	ldi	r24, 0xC3	; 195
 570:	98 06       	cpc	r9, r24
 572:	a1 04       	cpc	r10, r1
 574:	b1 04       	cpc	r11, r1
 576:	a1 f1       	breq	.+104    	; 0x5e0 <primes+0xa2>
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 578:	80 fe       	sbrs	r8, 0
 57a:	28 c0       	rjmp	.+80     	; 0x5cc <primes+0x8e>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	88 16       	cp	r8, r24
 580:	91 04       	cpc	r9, r1
 582:	a1 04       	cpc	r10, r1
 584:	b1 04       	cpc	r11, r1
 586:	11 f1       	breq	.+68     	; 0x5cc <primes+0x8e>
		if (i - 1 == n) return true;
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	88 16       	cp	r8, r24
 58c:	91 04       	cpc	r9, r1
 58e:	a1 04       	cpc	r10, r1
 590:	b1 04       	cpc	r11, r1
 592:	f9 f0       	breq	.+62     	; 0x5d2 <primes+0x94>
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	c8 2e       	mov	r12, r24
 598:	d1 2c       	mov	r13, r1
 59a:	e1 2c       	mov	r14, r1
 59c:	f1 2c       	mov	r15, r1
 59e:	0c c0       	rjmp	.+24     	; 0x5b8 <primes+0x7a>
 5a0:	d7 01       	movw	r26, r14
 5a2:	c6 01       	movw	r24, r12
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	a1 1d       	adc	r26, r1
 5a8:	b1 1d       	adc	r27, r1
 5aa:	c4 14       	cp	r12, r4
 5ac:	d5 04       	cpc	r13, r5
 5ae:	e6 04       	cpc	r14, r6
 5b0:	f7 04       	cpc	r15, r7
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <primes+0x94>
 5b4:	6c 01       	movw	r12, r24
 5b6:	7d 01       	movw	r14, r26
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 5b8:	c5 01       	movw	r24, r10
 5ba:	b4 01       	movw	r22, r8
 5bc:	a7 01       	movw	r20, r14
 5be:	96 01       	movw	r18, r12
 5c0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__divmodsi4>
 5c4:	67 2b       	or	r22, r23
 5c6:	68 2b       	or	r22, r24
 5c8:	69 2b       	or	r22, r25
 5ca:	51 f7       	brne	.-44     	; 0x5a0 <primes+0x62>
		if (i - 1 == n) return true;
 5cc:	24 01       	movw	r4, r8
 5ce:	35 01       	movw	r6, r10
 5d0:	c5 cf       	rjmp	.-118    	; 0x55c <primes+0x1e>
}

void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
 5d2:	c5 01       	movw	r24, r10
 5d4:	b4 01       	movw	r22, r8
 5d6:	0e 94 40 02 	call	0x480	; 0x480 <writeLong>


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
		if (i - 1 == n) return true;
 5da:	24 01       	movw	r4, r8
 5dc:	35 01       	movw	r6, r10
 5de:	be cf       	rjmp	.-132    	; 0x55c <primes+0x1e>
void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
	}
}
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	df 90       	pop	r13
 5e6:	cf 90       	pop	r12
 5e8:	bf 90       	pop	r11
 5ea:	af 90       	pop	r10
 5ec:	9f 90       	pop	r9
 5ee:	8f 90       	pop	r8
 5f0:	7f 90       	pop	r7
 5f2:	6f 90       	pop	r6
 5f4:	5f 90       	pop	r5
 5f6:	4f 90       	pop	r4
 5f8:	08 95       	ret

000005fa <main>:
}


int main(void)
{
	CLKPR = 0x80;
 5fa:	e1 e6       	ldi	r30, 0x61	; 97
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	80 83       	st	Z, r24
	CLKPR = 0x00;
 602:	10 82       	st	Z, r1
	primes();
}

void LCD_Init(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
 604:	86 e3       	ldi	r24, 0x36	; 54
 606:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
 60a:	87 e0       	ldi	r24, 0x07	; 7
 60c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
 610:	8f e0       	ldi	r24, 0x0F	; 15
 612:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 61c:	8d e0       	ldi	r24, 0x0D	; 13
 61e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
{
	CLKPR = 0x80;
	CLKPR = 0x00;
    LCD_Init();

	lock(&bli); lock(&but);
 622:	8c e0       	ldi	r24, 0x0C	; 12
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 46 04 	call	0x88c	; 0x88c <lock>
 62a:	88 e0       	ldi	r24, 0x08	; 8
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	0e 94 46 04 	call	0x88c	; 0x88c <lock>
	spawn(blink, 1);
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	87 e5       	ldi	r24, 0x57	; 87
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 4a 03 	call	0x694	; 0x694 <spawn>
	spawn(button, 2);
 63e:	62 e0       	ldi	r22, 0x02	; 2
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	84 e7       	ldi	r24, 0x74	; 116
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 4a 03 	call	0x694	; 0x694 <spawn>
	primes();
 64a:	0e 94 9f 02 	call	0x53e	; 0x53e <primes>
}
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	08 95       	ret

00000654 <dispatch>:
		while (1) ;  // not much else to do...
	}
	return p;
}

static void dispatch(thread next) {
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	00 d0       	rcall	.+0      	; 0x65a <dispatch+0x6>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	9a 83       	std	Y+2, r25	; 0x02
 660:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 662:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 666:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 66a:	06 96       	adiw	r24, 0x06	; 6
 66c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <setjmp>
 670:	89 2b       	or	r24, r25
 672:	29 f0       	breq	.+10     	; 0x67e <dispatch+0x2a>
		current = next;
		longjmp(next->context,1);
	}
}
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret
	return p;
}

static void dispatch(thread next) {
	if (setjmp(current->context) == 0) {
		current = next;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	9a 81       	ldd	r25, Y+2	; 0x02
 682:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 686:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		longjmp(next->context,1);
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	06 96       	adiw	r24, 0x06	; 6
 690:	0e 94 1c 06 	call	0xc38	; 0xc38 <longjmp>

00000694 <spawn>:
	}
}

void spawn(void (* function)(int), int arg) {
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	00 d0       	rcall	.+0      	; 0x69a <spawn+0x6>
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 69e:	f8 94       	cli
	if (!initialized) initialize();
 6a0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <initialized>
 6a4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <initialized+0x1>
 6a8:	23 2b       	or	r18, r19
 6aa:	d9 f1       	breq	.+118    	; 0x722 <spawn+0x8e>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 6ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 6b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 6b4:	3a 83       	std	Y+2, r19	; 0x02
 6b6:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 6b8:	23 2b       	or	r18, r19
 6ba:	09 f4       	brne	.+2      	; 0x6be <spawn+0x2a>
 6bc:	70 c0       	rjmp	.+224    	; 0x79e <spawn+0x10a>
		*queue = (*queue)->next;
 6be:	e9 81       	ldd	r30, Y+1	; 0x01
 6c0:	fa 81       	ldd	r31, Y+2	; 0x02
 6c2:	44 81       	ldd	r20, Z+4	; 0x04
 6c4:	55 81       	ldd	r21, Z+5	; 0x05
 6c6:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 6ca:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 6ce:	91 83       	std	Z+1, r25	; 0x01
 6d0:	80 83       	st	Z, r24
	newp->arg = arg;
 6d2:	73 83       	std	Z+3, r23	; 0x03
 6d4:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 6d6:	15 82       	std	Z+5, r1	; 0x05
 6d8:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 6da:	cf 01       	movw	r24, r30
 6dc:	06 96       	adiw	r24, 0x06	; 6
 6de:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <setjmp>
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <spawn+0x54>
 6e6:	68 c0       	rjmp	.+208    	; 0x7b8 <spawn+0x124>
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);
 6e8:	e9 81       	ldd	r30, Y+1	; 0x01
 6ea:	fa 81       	ldd	r31, Y+2	; 0x02
 6ec:	36 96       	adiw	r30, 0x06	; 6
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	87 59       	subi	r24, 0x97	; 151
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	91 8b       	std	Z+17, r25	; 0x11
 6f8:	80 8b       	std	Z+16, r24	; 0x10
 6fa:	93 8b       	std	Z+19, r25	; 0x13
 6fc:	82 8b       	std	Z+18, r24	; 0x12

	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
 6fe:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <readyQ>
 702:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <readyQ+0x1>
 706:	30 97       	sbiw	r30, 0x00	; 0
 708:	09 f4       	brne	.+2      	; 0x70c <spawn+0x78>
 70a:	4a c0       	rjmp	.+148    	; 0x7a0 <spawn+0x10c>
		*queue = p;
	} else {	
		thread q = *queue;
		thread m = q->next;
 70c:	04 80       	ldd	r0, Z+4	; 0x04
 70e:	f5 81       	ldd	r31, Z+5	; 0x05
 710:	e0 2d       	mov	r30, r0
		p = q->next;
		p->next = m;
 712:	f5 83       	std	Z+5, r31	; 0x05
 714:	e4 83       	std	Z+4, r30	; 0x04
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 716:	78 94       	sei
}
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 722:	2c ee       	ldi	r18, 0xEC	; 236
 724:	31 e0       	ldi	r19, 0x01	; 1
 726:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <threads+0x5>
 72a:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <threads+0x4>
 72e:	29 e5       	ldi	r18, 0x59	; 89
 730:	32 e0       	ldi	r19, 0x02	; 2
 732:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <threads+0x72>
 736:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <threads+0x71>
 73a:	26 ec       	ldi	r18, 0xC6	; 198
 73c:	32 e0       	ldi	r19, 0x02	; 2
 73e:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <threads+0xdf>
 742:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 746:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <threads+0x14c>
 74a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14b>


	DDRB |= (1 << DDB7);
 74e:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
 750:	2f 9a       	sbi	0x05, 7	; 5
	MCUCR = (0 << PUD);
 752:	15 be       	out	0x35, r1	; 53


	EIMSK |= (1<<PCIF1);
 754:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15);
 756:	ec e6       	ldi	r30, 0x6C	; 108
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	20 81       	ld	r18, Z
 75c:	20 68       	ori	r18, 0x80	; 128
 75e:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1A1);
 760:	e0 e8       	ldi	r30, 0x80	; 128
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	20 81       	ld	r18, Z
 766:	20 68       	ori	r18, 0x80	; 128
 768:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A);
 76a:	ef e6       	ldi	r30, 0x6F	; 111
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	20 81       	ld	r18, Z
 770:	22 60       	ori	r18, 0x02	; 2
 772:	20 83       	st	Z, r18
	
	OCR1A = 0x1E85;
 774:	25 e8       	ldi	r18, 0x85	; 133
 776:	3e e1       	ldi	r19, 0x1E	; 30
 778:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 77c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	initialized = 1;
 780:	21 e0       	ldi	r18, 0x01	; 1
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <initialized+0x1>
 788:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <initialized>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 78c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 790:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 794:	3a 83       	std	Y+2, r19	; 0x02
 796:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 798:	23 2b       	or	r18, r19
 79a:	09 f0       	breq	.+2      	; 0x79e <spawn+0x10a>
 79c:	90 cf       	rjmp	.-224    	; 0x6be <spawn+0x2a>
 79e:	ff cf       	rjmp	.-2      	; 0x79e <spawn+0x10a>
	initialized = 1;
}
static void putFirst(thread p, thread *queue) {
	//p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 7a0:	29 81       	ldd	r18, Y+1	; 0x01
 7a2:	3a 81       	ldd	r19, Y+2	; 0x02
 7a4:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <readyQ+0x1>
 7a8:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <readyQ>
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	putFirst(newp, &readyQ);
	ENABLE();
 7ac:	78 94       	sei
}
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret
	newp = dequeue(&freeQ);
	newp->function = function;
	newp->arg = arg;
	newp->next = NULL;
	if (setjmp(newp->context) == 1) {
		ENABLE();
 7b8:	78 94       	sei
		current->function(current->arg);
 7ba:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 7be:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 7c2:	ed 91       	ld	r30, X+
 7c4:	fc 91       	ld	r31, X
 7c6:	11 97       	sbiw	r26, 0x01	; 1
 7c8:	12 96       	adiw	r26, 0x02	; 2
 7ca:	8d 91       	ld	r24, X+
 7cc:	9c 91       	ld	r25, X
 7ce:	13 97       	sbiw	r26, 0x03	; 3
 7d0:	09 95       	icall
		DISABLE();
 7d2:	f8 94       	cli
		enqueue(current, &freeQ);
 7d4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 7d8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 7dc:	15 96       	adiw	r26, 0x05	; 5
 7de:	1c 92       	st	X, r1
 7e0:	1e 92       	st	-X, r1
 7e2:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 7e4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 7e8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 7ec:	30 97       	sbiw	r30, 0x00	; 0
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <spawn+0x160>
 7f0:	17 c0       	rjmp	.+46     	; 0x820 <spawn+0x18c>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 7f2:	fc 01       	movw	r30, r24
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	95 81       	ldd	r25, Z+5	; 0x05
 7f8:	00 97       	sbiw	r24, 0x00	; 0
 7fa:	d9 f7       	brne	.-10     	; 0x7f2 <spawn+0x15e>
		q->next = p;
 7fc:	b5 83       	std	Z+5, r27	; 0x05
 7fe:	a4 83       	std	Z+4, r26	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 800:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <readyQ>
 804:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <readyQ+0x1>
	if (*queue) {
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	a1 f0       	breq	.+40     	; 0x834 <spawn+0x1a0>
		*queue = (*queue)->next;
 80c:	fc 01       	movw	r30, r24
 80e:	24 81       	ldd	r18, Z+4	; 0x04
 810:	35 81       	ldd	r19, Z+5	; 0x05
 812:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <readyQ+0x1>
 816:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 81a:	0e 94 2a 03 	call	0x654	; 0x654 <dispatch>
 81e:	64 cf       	rjmp	.-312    	; 0x6e8 <spawn+0x54>


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 820:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 824:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 828:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <readyQ>
 82c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <readyQ+0x1>
	if (*queue) {
 830:	00 97       	sbiw	r24, 0x00	; 0
 832:	61 f7       	brne	.-40     	; 0x80c <spawn+0x178>
 834:	ff cf       	rjmp	.-2      	; 0x834 <spawn+0x1a0>

00000836 <yield>:
	putFirst(newp, &readyQ);
	ENABLE();
}

void yield(void) {
	DISABLE();
 836:	f8 94       	cli
	enqueue(current,&readyQ);
 838:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 83c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 840:	fc 01       	movw	r30, r24
 842:	15 82       	std	Z+5, r1	; 0x05
 844:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 846:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <readyQ>
 84a:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <readyQ+0x1>
 84e:	10 97       	sbiw	r26, 0x00	; 0
 850:	b9 f0       	breq	.+46     	; 0x880 <yield+0x4a>
 852:	fd 01       	movw	r30, r26
 854:	01 c0       	rjmp	.+2      	; 0x858 <yield+0x22>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 856:	f9 01       	movw	r30, r18
 858:	24 81       	ldd	r18, Z+4	; 0x04
 85a:	35 81       	ldd	r19, Z+5	; 0x05
 85c:	21 15       	cp	r18, r1
 85e:	31 05       	cpc	r19, r1
 860:	d1 f7       	brne	.-12     	; 0x856 <yield+0x20>
		q->next = p;
 862:	95 83       	std	Z+5, r25	; 0x05
 864:	84 83       	std	Z+4, r24	; 0x04
 866:	14 96       	adiw	r26, 0x04	; 4
 868:	2d 91       	ld	r18, X+
 86a:	3c 91       	ld	r19, X
 86c:	15 97       	sbiw	r26, 0x05	; 5
 86e:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 870:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <readyQ+0x1>
 874:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
 878:	0e 94 2a 03 	call	0x654	; 0x654 <dispatch>
	ENABLE();
 87c:	78 94       	sei
}
 87e:	08 95       	ret
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	09 f4       	brne	.+2      	; 0x886 <yield+0x50>
 884:	ff cf       	rjmp	.-2      	; 0x884 <yield+0x4e>
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	f2 cf       	rjmp	.-28     	; 0x870 <yield+0x3a>

0000088c <lock>:
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	dc 01       	movw	r26, r24
	DISABLE();
 892:	f8 94       	cli
	if(m->locked == 0) m->locked = 1;
 894:	8d 91       	ld	r24, X+
 896:	9c 91       	ld	r25, X
 898:	11 97       	sbiw	r26, 0x01	; 1
 89a:	89 2b       	or	r24, r25
 89c:	41 f1       	breq	.+80     	; 0x8ee <lock+0x62>
	else {
		enqueue(current,&m->waitQ);
 89e:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 8a2:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 8a6:	1d 82       	std	Y+5, r1	; 0x05
 8a8:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 8aa:	12 96       	adiw	r26, 0x02	; 2
 8ac:	ed 91       	ld	r30, X+
 8ae:	fc 91       	ld	r31, X
 8b0:	13 97       	sbiw	r26, 0x03	; 3
 8b2:	30 97       	sbiw	r30, 0x00	; 0
 8b4:	11 f4       	brne	.+4      	; 0x8ba <lock+0x2e>
 8b6:	23 c0       	rjmp	.+70     	; 0x8fe <lock+0x72>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 8b8:	fc 01       	movw	r30, r24
 8ba:	84 81       	ldd	r24, Z+4	; 0x04
 8bc:	95 81       	ldd	r25, Z+5	; 0x05
 8be:	00 97       	sbiw	r24, 0x00	; 0
 8c0:	d9 f7       	brne	.-10     	; 0x8b8 <lock+0x2c>
		q->next = p;
 8c2:	d5 83       	std	Z+5, r29	; 0x05
 8c4:	c4 83       	std	Z+4, r28	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 8c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <readyQ>
 8ca:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <readyQ+0x1>
	if (*queue) {
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	69 f0       	breq	.+26     	; 0x8ec <lock+0x60>
		*queue = (*queue)->next;
 8d2:	fc 01       	movw	r30, r24
 8d4:	24 81       	ldd	r18, Z+4	; 0x04
 8d6:	35 81       	ldd	r19, Z+5	; 0x05
 8d8:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <readyQ+0x1>
 8dc:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <readyQ>
void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
	else {
		enqueue(current,&m->waitQ);
		dispatch(dequeue(&readyQ));
 8e0:	0e 94 2a 03 	call	0x654	; 0x654 <dispatch>
	}
	ENABLE();
 8e4:	78 94       	sei
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret
 8ec:	ff cf       	rjmp	.-2      	; 0x8ec <lock+0x60>
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	8d 93       	st	X+, r24
 8f4:	9c 93       	st	X, r25
	else {
		enqueue(current,&m->waitQ);
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 8f6:	78 94       	sei
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 8fe:	13 96       	adiw	r26, 0x03	; 3
 900:	dc 93       	st	X, r29
 902:	ce 93       	st	-X, r28
 904:	12 97       	sbiw	r26, 0x02	; 2
 906:	df cf       	rjmp	.-66     	; 0x8c6 <lock+0x3a>

00000908 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	fc 01       	movw	r30, r24
	DISABLE();
 90e:	f8 94       	cli
	if (m->waitQ == NULL){
 910:	82 81       	ldd	r24, Z+2	; 0x02
 912:	93 81       	ldd	r25, Z+3	; 0x03
 914:	89 2b       	or	r24, r25
 916:	51 f1       	breq	.+84     	; 0x96c <unlock+0x64>
		m->locked = 0;
		} else {
		enqueue(current,&readyQ);
 918:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 91c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
	}
}


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 920:	1d 82       	std	Y+5, r1	; 0x05
 922:	1c 82       	std	Y+4, r1	; 0x04
	if (*queue == NULL) {
 924:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <readyQ>
 928:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <readyQ+0x1>
 92c:	10 97       	sbiw	r26, 0x00	; 0
 92e:	11 f4       	brne	.+4      	; 0x934 <unlock+0x2c>
 930:	23 c0       	rjmp	.+70     	; 0x978 <unlock+0x70>
		*queue = p;
	} else {
		thread q = *queue;
		while (q->next) q = q->next;
 932:	dc 01       	movw	r26, r24
 934:	14 96       	adiw	r26, 0x04	; 4
 936:	8d 91       	ld	r24, X+
 938:	9c 91       	ld	r25, X
 93a:	15 97       	sbiw	r26, 0x05	; 5
 93c:	00 97       	sbiw	r24, 0x00	; 0
 93e:	c9 f7       	brne	.-14     	; 0x932 <unlock+0x2a>
		q->next = p;
 940:	15 96       	adiw	r26, 0x05	; 5
 942:	dc 93       	st	X, r29
 944:	ce 93       	st	-X, r28
 946:	14 97       	sbiw	r26, 0x04	; 4
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 948:	82 81       	ldd	r24, Z+2	; 0x02
 94a:	93 81       	ldd	r25, Z+3	; 0x03
	if (*queue) {
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	69 f0       	breq	.+26     	; 0x96a <unlock+0x62>
		*queue = (*queue)->next;
 950:	dc 01       	movw	r26, r24
 952:	14 96       	adiw	r26, 0x04	; 4
 954:	2d 91       	ld	r18, X+
 956:	3c 91       	ld	r19, X
 958:	15 97       	sbiw	r26, 0x05	; 5
 95a:	33 83       	std	Z+3, r19	; 0x03
 95c:	22 83       	std	Z+2, r18	; 0x02
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&m->waitQ));
 95e:	0e 94 2a 03 	call	0x654	; 0x654 <dispatch>
	}
	ENABLE();
 962:	78 94       	sei
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	08 95       	ret
 96a:	ff cf       	rjmp	.-2      	; 0x96a <unlock+0x62>
}

void unlock(mutex *m) {
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
 96c:	11 82       	std	Z+1, r1	; 0x01
 96e:	10 82       	st	Z, r1
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&m->waitQ));
	}
	ENABLE();
 970:	78 94       	sei
}
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	08 95       	ret


static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 978:	d0 93 11 01 	sts	0x0111, r29	; 0x800111 <readyQ+0x1>
 97c:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <readyQ>
 980:	e3 cf       	rjmp	.-58     	; 0x948 <unlock+0x40>

00000982 <__fixsfsi>:
 982:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 986:	68 94       	set
 988:	b1 11       	cpse	r27, r1
 98a:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_szero>
 98e:	08 95       	ret

00000990 <__fixunssfsi>:
 990:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_splitA>
 994:	88 f0       	brcs	.+34     	; 0x9b8 <__fixunssfsi+0x28>
 996:	9f 57       	subi	r25, 0x7F	; 127
 998:	98 f0       	brcs	.+38     	; 0x9c0 <__fixunssfsi+0x30>
 99a:	b9 2f       	mov	r27, r25
 99c:	99 27       	eor	r25, r25
 99e:	b7 51       	subi	r27, 0x17	; 23
 9a0:	b0 f0       	brcs	.+44     	; 0x9ce <__fixunssfsi+0x3e>
 9a2:	e1 f0       	breq	.+56     	; 0x9dc <__fixunssfsi+0x4c>
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a f0       	brmi	.+6      	; 0x9b4 <__fixunssfsi+0x24>
 9ae:	ba 95       	dec	r27
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__fixunssfsi+0x14>
 9b2:	14 c0       	rjmp	.+40     	; 0x9dc <__fixunssfsi+0x4c>
 9b4:	b1 30       	cpi	r27, 0x01	; 1
 9b6:	91 f0       	breq	.+36     	; 0x9dc <__fixunssfsi+0x4c>
 9b8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_zero>
 9bc:	b1 e0       	ldi	r27, 0x01	; 1
 9be:	08 95       	ret
 9c0:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_zero>
 9c4:	67 2f       	mov	r22, r23
 9c6:	78 2f       	mov	r23, r24
 9c8:	88 27       	eor	r24, r24
 9ca:	b8 5f       	subi	r27, 0xF8	; 248
 9cc:	39 f0       	breq	.+14     	; 0x9dc <__fixunssfsi+0x4c>
 9ce:	b9 3f       	cpi	r27, 0xF9	; 249
 9d0:	cc f3       	brlt	.-14     	; 0x9c4 <__fixunssfsi+0x34>
 9d2:	86 95       	lsr	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	b3 95       	inc	r27
 9da:	d9 f7       	brne	.-10     	; 0x9d2 <__fixunssfsi+0x42>
 9dc:	3e f4       	brtc	.+14     	; 0x9ec <__fixunssfsi+0x5c>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	08 95       	ret

000009ee <__floatunsisf>:
 9ee:	e8 94       	clt
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__floatsisf+0x12>

000009f2 <__floatsisf>:
 9f2:	97 fb       	bst	r25, 7
 9f4:	3e f4       	brtc	.+14     	; 0xa04 <__floatsisf+0x12>
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	99 23       	and	r25, r25
 a06:	a9 f0       	breq	.+42     	; 0xa32 <__floatsisf+0x40>
 a08:	f9 2f       	mov	r31, r25
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	bb 27       	eor	r27, r27
 a0e:	93 95       	inc	r25
 a10:	f6 95       	lsr	r31
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f1 11       	cpse	r31, r1
 a1c:	f8 cf       	rjmp	.-16     	; 0xa0e <__floatsisf+0x1c>
 a1e:	fa f4       	brpl	.+62     	; 0xa5e <__floatsisf+0x6c>
 a20:	bb 0f       	add	r27, r27
 a22:	11 f4       	brne	.+4      	; 0xa28 <__floatsisf+0x36>
 a24:	60 ff       	sbrs	r22, 0
 a26:	1b c0       	rjmp	.+54     	; 0xa5e <__floatsisf+0x6c>
 a28:	6f 5f       	subi	r22, 0xFF	; 255
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	16 c0       	rjmp	.+44     	; 0xa5e <__floatsisf+0x6c>
 a32:	88 23       	and	r24, r24
 a34:	11 f0       	breq	.+4      	; 0xa3a <__floatsisf+0x48>
 a36:	96 e9       	ldi	r25, 0x96	; 150
 a38:	11 c0       	rjmp	.+34     	; 0xa5c <__floatsisf+0x6a>
 a3a:	77 23       	and	r23, r23
 a3c:	21 f0       	breq	.+8      	; 0xa46 <__floatsisf+0x54>
 a3e:	9e e8       	ldi	r25, 0x8E	; 142
 a40:	87 2f       	mov	r24, r23
 a42:	76 2f       	mov	r23, r22
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <__floatsisf+0x5e>
 a46:	66 23       	and	r22, r22
 a48:	71 f0       	breq	.+28     	; 0xa66 <__floatsisf+0x74>
 a4a:	96 e8       	ldi	r25, 0x86	; 134
 a4c:	86 2f       	mov	r24, r22
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	2a f0       	brmi	.+10     	; 0xa5e <__floatsisf+0x6c>
 a54:	9a 95       	dec	r25
 a56:	66 0f       	add	r22, r22
 a58:	77 1f       	adc	r23, r23
 a5a:	88 1f       	adc	r24, r24
 a5c:	da f7       	brpl	.-10     	; 0xa54 <__floatsisf+0x62>
 a5e:	88 0f       	add	r24, r24
 a60:	96 95       	lsr	r25
 a62:	87 95       	ror	r24
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <floor>:
 a68:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_trunc>
 a6c:	90 f0       	brcs	.+36     	; 0xa92 <floor+0x2a>
 a6e:	9f 37       	cpi	r25, 0x7F	; 127
 a70:	48 f4       	brcc	.+18     	; 0xa84 <floor+0x1c>
 a72:	91 11       	cpse	r25, r1
 a74:	16 f0       	brts	.+4      	; 0xa7a <floor+0x12>
 a76:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_szero>
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	80 e8       	ldi	r24, 0x80	; 128
 a80:	9f eb       	ldi	r25, 0xBF	; 191
 a82:	08 95       	ret
 a84:	26 f4       	brtc	.+8      	; 0xa8e <floor+0x26>
 a86:	1b 16       	cp	r1, r27
 a88:	61 1d       	adc	r22, r1
 a8a:	71 1d       	adc	r23, r1
 a8c:	81 1d       	adc	r24, r1
 a8e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_mintl>
 a92:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_mpack>

00000a96 <__fp_mintl>:
 a96:	88 23       	and	r24, r24
 a98:	71 f4       	brne	.+28     	; 0xab6 <__fp_mintl+0x20>
 a9a:	77 23       	and	r23, r23
 a9c:	21 f0       	breq	.+8      	; 0xaa6 <__fp_mintl+0x10>
 a9e:	98 50       	subi	r25, 0x08	; 8
 aa0:	87 2b       	or	r24, r23
 aa2:	76 2f       	mov	r23, r22
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__fp_mintl+0x1e>
 aa6:	66 23       	and	r22, r22
 aa8:	11 f4       	brne	.+4      	; 0xaae <__fp_mintl+0x18>
 aaa:	99 27       	eor	r25, r25
 aac:	0d c0       	rjmp	.+26     	; 0xac8 <__fp_mintl+0x32>
 aae:	90 51       	subi	r25, 0x10	; 16
 ab0:	86 2b       	or	r24, r22
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	60 e0       	ldi	r22, 0x00	; 0
 ab6:	2a f0       	brmi	.+10     	; 0xac2 <__fp_mintl+0x2c>
 ab8:	9a 95       	dec	r25
 aba:	66 0f       	add	r22, r22
 abc:	77 1f       	adc	r23, r23
 abe:	88 1f       	adc	r24, r24
 ac0:	da f7       	brpl	.-10     	; 0xab8 <__fp_mintl+0x22>
 ac2:	88 0f       	add	r24, r24
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret

00000acc <__fp_mpack>:
 acc:	9f 3f       	cpi	r25, 0xFF	; 255
 ace:	31 f0       	breq	.+12     	; 0xadc <__fp_mpack_finite+0xc>

00000ad0 <__fp_mpack_finite>:
 ad0:	91 50       	subi	r25, 0x01	; 1
 ad2:	20 f4       	brcc	.+8      	; 0xadc <__fp_mpack_finite+0xc>
 ad4:	87 95       	ror	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	88 0f       	add	r24, r24
 ade:	91 1d       	adc	r25, r1
 ae0:	96 95       	lsr	r25
 ae2:	87 95       	ror	r24
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <__fp_split3>:
 ae8:	57 fd       	sbrc	r21, 7
 aea:	90 58       	subi	r25, 0x80	; 128
 aec:	44 0f       	add	r20, r20
 aee:	55 1f       	adc	r21, r21
 af0:	59 f0       	breq	.+22     	; 0xb08 <__fp_splitA+0x10>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	71 f0       	breq	.+28     	; 0xb12 <__fp_splitA+0x1a>
 af6:	47 95       	ror	r20

00000af8 <__fp_splitA>:
 af8:	88 0f       	add	r24, r24
 afa:	97 fb       	bst	r25, 7
 afc:	99 1f       	adc	r25, r25
 afe:	61 f0       	breq	.+24     	; 0xb18 <__fp_splitA+0x20>
 b00:	9f 3f       	cpi	r25, 0xFF	; 255
 b02:	79 f0       	breq	.+30     	; 0xb22 <__fp_splitA+0x2a>
 b04:	87 95       	ror	r24
 b06:	08 95       	ret
 b08:	12 16       	cp	r1, r18
 b0a:	13 06       	cpc	r1, r19
 b0c:	14 06       	cpc	r1, r20
 b0e:	55 1f       	adc	r21, r21
 b10:	f2 cf       	rjmp	.-28     	; 0xaf6 <__fp_split3+0xe>
 b12:	46 95       	lsr	r20
 b14:	f1 df       	rcall	.-30     	; 0xaf8 <__fp_splitA>
 b16:	08 c0       	rjmp	.+16     	; 0xb28 <__fp_splitA+0x30>
 b18:	16 16       	cp	r1, r22
 b1a:	17 06       	cpc	r1, r23
 b1c:	18 06       	cpc	r1, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	f1 cf       	rjmp	.-30     	; 0xb04 <__fp_splitA+0xc>
 b22:	86 95       	lsr	r24
 b24:	71 05       	cpc	r23, r1
 b26:	61 05       	cpc	r22, r1
 b28:	08 94       	sec
 b2a:	08 95       	ret

00000b2c <__fp_trunc>:
 b2c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_splitA>
 b30:	a0 f0       	brcs	.+40     	; 0xb5a <__fp_trunc+0x2e>
 b32:	be e7       	ldi	r27, 0x7E	; 126
 b34:	b9 17       	cp	r27, r25
 b36:	88 f4       	brcc	.+34     	; 0xb5a <__fp_trunc+0x2e>
 b38:	bb 27       	eor	r27, r27
 b3a:	9f 38       	cpi	r25, 0x8F	; 143
 b3c:	60 f4       	brcc	.+24     	; 0xb56 <__fp_trunc+0x2a>
 b3e:	16 16       	cp	r1, r22
 b40:	b1 1d       	adc	r27, r1
 b42:	67 2f       	mov	r22, r23
 b44:	78 2f       	mov	r23, r24
 b46:	88 27       	eor	r24, r24
 b48:	98 5f       	subi	r25, 0xF8	; 248
 b4a:	f7 cf       	rjmp	.-18     	; 0xb3a <__fp_trunc+0xe>
 b4c:	86 95       	lsr	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	b1 1d       	adc	r27, r1
 b54:	93 95       	inc	r25
 b56:	96 39       	cpi	r25, 0x96	; 150
 b58:	c8 f3       	brcs	.-14     	; 0xb4c <__fp_trunc+0x20>
 b5a:	08 95       	ret

00000b5c <__fp_zero>:
 b5c:	e8 94       	clt

00000b5e <__fp_szero>:
 b5e:	bb 27       	eor	r27, r27
 b60:	66 27       	eor	r22, r22
 b62:	77 27       	eor	r23, r23
 b64:	cb 01       	movw	r24, r22
 b66:	97 f9       	bld	r25, 7
 b68:	08 95       	ret

00000b6a <__divmodsi4>:
 b6a:	05 2e       	mov	r0, r21
 b6c:	97 fb       	bst	r25, 7
 b6e:	1e f4       	brtc	.+6      	; 0xb76 <__divmodsi4+0xc>
 b70:	00 94       	com	r0
 b72:	0e 94 cc 05 	call	0xb98	; 0xb98 <__negsi2>
 b76:	57 fd       	sbrc	r21, 7
 b78:	07 d0       	rcall	.+14     	; 0xb88 <__divmodsi4_neg2>
 b7a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
 b7e:	07 fc       	sbrc	r0, 7
 b80:	03 d0       	rcall	.+6      	; 0xb88 <__divmodsi4_neg2>
 b82:	4e f4       	brtc	.+18     	; 0xb96 <__divmodsi4_exit>
 b84:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__negsi2>

00000b88 <__divmodsi4_neg2>:
 b88:	50 95       	com	r21
 b8a:	40 95       	com	r20
 b8c:	30 95       	com	r19
 b8e:	21 95       	neg	r18
 b90:	3f 4f       	sbci	r19, 0xFF	; 255
 b92:	4f 4f       	sbci	r20, 0xFF	; 255
 b94:	5f 4f       	sbci	r21, 0xFF	; 255

00000b96 <__divmodsi4_exit>:
 b96:	08 95       	ret

00000b98 <__negsi2>:
 b98:	90 95       	com	r25
 b9a:	80 95       	com	r24
 b9c:	70 95       	com	r23
 b9e:	61 95       	neg	r22
 ba0:	7f 4f       	sbci	r23, 0xFF	; 255
 ba2:	8f 4f       	sbci	r24, 0xFF	; 255
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	08 95       	ret

00000ba8 <__tablejump2__>:
 ba8:	ee 0f       	add	r30, r30
 baa:	ff 1f       	adc	r31, r31
 bac:	05 90       	lpm	r0, Z+
 bae:	f4 91       	lpm	r31, Z
 bb0:	e0 2d       	mov	r30, r0
 bb2:	09 94       	ijmp

00000bb4 <__udivmodsi4>:
 bb4:	a1 e2       	ldi	r26, 0x21	; 33
 bb6:	1a 2e       	mov	r1, r26
 bb8:	aa 1b       	sub	r26, r26
 bba:	bb 1b       	sub	r27, r27
 bbc:	fd 01       	movw	r30, r26
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <__udivmodsi4_ep>

00000bc0 <__udivmodsi4_loop>:
 bc0:	aa 1f       	adc	r26, r26
 bc2:	bb 1f       	adc	r27, r27
 bc4:	ee 1f       	adc	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	a2 17       	cp	r26, r18
 bca:	b3 07       	cpc	r27, r19
 bcc:	e4 07       	cpc	r30, r20
 bce:	f5 07       	cpc	r31, r21
 bd0:	20 f0       	brcs	.+8      	; 0xbda <__udivmodsi4_ep>
 bd2:	a2 1b       	sub	r26, r18
 bd4:	b3 0b       	sbc	r27, r19
 bd6:	e4 0b       	sbc	r30, r20
 bd8:	f5 0b       	sbc	r31, r21

00000bda <__udivmodsi4_ep>:
 bda:	66 1f       	adc	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	1a 94       	dec	r1
 be4:	69 f7       	brne	.-38     	; 0xbc0 <__udivmodsi4_loop>
 be6:	60 95       	com	r22
 be8:	70 95       	com	r23
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	9b 01       	movw	r18, r22
 bf0:	ac 01       	movw	r20, r24
 bf2:	bd 01       	movw	r22, r26
 bf4:	cf 01       	movw	r24, r30
 bf6:	08 95       	ret

00000bf8 <setjmp>:
 bf8:	dc 01       	movw	r26, r24
 bfa:	2d 92       	st	X+, r2
 bfc:	3d 92       	st	X+, r3
 bfe:	4d 92       	st	X+, r4
 c00:	5d 92       	st	X+, r5
 c02:	6d 92       	st	X+, r6
 c04:	7d 92       	st	X+, r7
 c06:	8d 92       	st	X+, r8
 c08:	9d 92       	st	X+, r9
 c0a:	ad 92       	st	X+, r10
 c0c:	bd 92       	st	X+, r11
 c0e:	cd 92       	st	X+, r12
 c10:	dd 92       	st	X+, r13
 c12:	ed 92       	st	X+, r14
 c14:	fd 92       	st	X+, r15
 c16:	0d 93       	st	X+, r16
 c18:	1d 93       	st	X+, r17
 c1a:	cd 93       	st	X+, r28
 c1c:	dd 93       	st	X+, r29
 c1e:	ff 91       	pop	r31
 c20:	ef 91       	pop	r30
 c22:	8d b7       	in	r24, 0x3d	; 61
 c24:	8d 93       	st	X+, r24
 c26:	8e b7       	in	r24, 0x3e	; 62
 c28:	8d 93       	st	X+, r24
 c2a:	8f b7       	in	r24, 0x3f	; 63
 c2c:	8d 93       	st	X+, r24
 c2e:	ed 93       	st	X+, r30
 c30:	fd 93       	st	X+, r31
 c32:	88 27       	eor	r24, r24
 c34:	99 27       	eor	r25, r25
 c36:	09 94       	ijmp

00000c38 <longjmp>:
 c38:	dc 01       	movw	r26, r24
 c3a:	cb 01       	movw	r24, r22
 c3c:	81 30       	cpi	r24, 0x01	; 1
 c3e:	91 05       	cpc	r25, r1
 c40:	81 1d       	adc	r24, r1
 c42:	2d 90       	ld	r2, X+
 c44:	3d 90       	ld	r3, X+
 c46:	4d 90       	ld	r4, X+
 c48:	5d 90       	ld	r5, X+
 c4a:	6d 90       	ld	r6, X+
 c4c:	7d 90       	ld	r7, X+
 c4e:	8d 90       	ld	r8, X+
 c50:	9d 90       	ld	r9, X+
 c52:	ad 90       	ld	r10, X+
 c54:	bd 90       	ld	r11, X+
 c56:	cd 90       	ld	r12, X+
 c58:	dd 90       	ld	r13, X+
 c5a:	ed 90       	ld	r14, X+
 c5c:	fd 90       	ld	r15, X+
 c5e:	0d 91       	ld	r16, X+
 c60:	1d 91       	ld	r17, X+
 c62:	cd 91       	ld	r28, X+
 c64:	dd 91       	ld	r29, X+
 c66:	ed 91       	ld	r30, X+
 c68:	fd 91       	ld	r31, X+
 c6a:	0d 90       	ld	r0, X+
 c6c:	f8 94       	cli
 c6e:	fe bf       	out	0x3e, r31	; 62
 c70:	0f be       	out	0x3f, r0	; 63
 c72:	ed bf       	out	0x3d, r30	; 61
 c74:	ed 91       	ld	r30, X+
 c76:	fd 91       	ld	r31, X+
 c78:	09 94       	ijmp

00000c7a <_exit>:
 c7a:	f8 94       	cli

00000c7c <__stop_program>:
 c7c:	ff cf       	rjmp	.-2      	; 0xc7c <__stop_program>
